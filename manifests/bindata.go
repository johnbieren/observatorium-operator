// Code generated by go-bindata. DO NOT EDIT.
// sources:
// assets/jaeger-adminService.yaml (275B)
// assets/jaeger-agentService.yaml (275B)
// assets/jaeger-deployment.yaml (1.733kB)
// assets/jaeger-headlessService.yaml (300B)
// assets/jaeger-prometheusRule.yaml (3.798kB)
// assets/jaeger-queryService.yaml (270B)
// assets/jaeger-volumeClaim.yaml (277B)
// assets/observatorium-api-deployment.yaml (1.526kB)
// assets/observatorium-api-service.yaml (189B)
// assets/telemeter-memcached-service.yaml (324B)
// assets/telemeter-memcached-serviceMonitor.yaml (320B)
// assets/telemeter-memcached-statefulSet.yaml (1.007kB)
// assets/telemeter-secret.yaml (203B)
// assets/telemeter-service.yaml (477B)
// assets/telemeter-serviceAccount.yaml (98B)
// assets/telemeter-serviceMonitor.yaml (553B)
// assets/telemeter-serviceMonitorFederate.yaml (659B)
// assets/telemeter-statefulSet.yaml (2.731kB)
// assets/thanos-compactor-service.yaml (270B)
// assets/thanos-compactor-statefulSet.yaml (3.018kB)
// assets/thanos-querier-cache-configmap.yaml (667B)
// assets/thanos-querier-cache-deployment.yaml (1.119kB)
// assets/thanos-querier-cache-service.yaml (295B)
// assets/thanos-querier-deployment.yaml (3.283kB)
// assets/thanos-querier-service.yaml (315B)
// assets/thanos-receive-controller-configmap.yaml (280B)
// assets/thanos-receive-controller-deployment.yaml (1.126kB)
// assets/thanos-receive-controller-role.yaml (324B)
// assets/thanos-receive-controller-roleBinding.yaml (318B)
// assets/thanos-receive-controller-service.yaml (296B)
// assets/thanos-receive-controller-serviceAccount.yaml (107B)
// assets/thanos-receive-controller-serviceMonitor.yaml (248B)
// assets/thanos-receive-service-default.yaml (485B)
// assets/thanos-receive-service.yaml (379B)
// assets/thanos-receive-statefulSet-default.yaml (4.641kB)
// assets/thanos-ruler-service.yaml (328B)
// assets/thanos-ruler-statefulSet.yaml (1.928kB)
// assets/thanos-rules-prometheusrule.yaml (11.94kB)
// assets/thanos-store-service.yaml (330B)
// assets/thanos-store-statefulSet.yaml (3.054kB)

package manifests

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsJaegerAdminserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x4b\x6a\xc0\x30\x0c\x44\xf7\x3e\x85\x2e\xe0\x94\x94\x52\xa8\x4f\x51\x28\x74\xaf\x38\x43\xaa\xc6\x3f\x64\x25\xe7\x2f\x31\xd9\x64\xd9\x9d\x34\x83\xf4\x1e\x37\xf9\x86\x76\xa9\x25\xd0\x39\xbb\x5d\xca\x1a\xe8\x0b\x7a\x4a\x84\xcb\x30\x5e\xd9\x38\x38\xa2\xc4\x0b\x52\xbf\x26\x22\x6e\x6d\xda\x8f\x05\x5a\x60\xe8\x93\xd4\x97\xc2\x19\x81\x7e\x19\x1b\xd4\x73\x4a\x5e\x8a\xaf\x05\x8e\xe8\xd9\xac\x59\xca\x1d\xf6\xc6\x11\x81\xea\xd2\xa1\x27\x5b\x55\x39\xb2\xeb\x0d\xf1\x62\xb4\xaa\x36\x60\xfe\x7e\x30\x2e\xfd\x8f\x59\x1b\x06\x57\x1f\x68\x7e\x7b\x7d\xff\x18\xbb\xb1\x6e\xb0\xcf\x47\xda\x91\x10\xad\xea\x7f\x9d\xff\x02\x00\x00\xff\xff\x04\xdc\x4f\x72\x13\x01\x00\x00")

func assetsJaegerAdminserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsJaegerAdminserviceYaml,
		"assets/jaeger-adminService.yaml",
	)
}

func assetsJaegerAdminserviceYaml() (*asset, error) {
	bytes, err := assetsJaegerAdminserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/jaeger-adminService.yaml", size: 275, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0xb9, 0x7d, 0x78, 0xd8, 0x9d, 0xe8, 0xe4, 0x9, 0x71, 0x46, 0x4e, 0x20, 0x25, 0x3, 0xd1, 0x2b, 0x8a, 0xce, 0xb9, 0x7f, 0x4f, 0xad, 0x4d, 0xa, 0xcd, 0x97, 0x60, 0xbf, 0x68, 0xd1, 0x5e}}
	return a, nil
}

var _assetsJaegerAgentserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8e\x4f\x4a\xc7\x40\x0c\x85\xf7\x73\x8a\x5c\xa0\x3f\xa9\x08\xc2\x9c\x42\x10\xdc\xa7\xd3\xc7\x10\xdb\xf9\x43\x92\x0e\x78\x7b\x69\xe9\x46\xc5\x5d\xf2\x1e\xbc\xef\xe3\x2e\x1f\x50\x93\x56\x23\x8d\x39\x6c\x52\xd7\x48\xef\xd0\x21\x09\xa1\xc0\x79\x65\xe7\x18\x88\x76\x5e\xb0\xdb\x79\x11\x71\xef\x8f\xed\x58\xa0\x15\x0e\x7b\x48\x7b\xaa\x5c\x10\xe9\x93\x91\xa1\x13\x67\x54\x0f\x44\x7f\xc3\x69\x15\x4b\x6d\x40\xbf\xee\xda\x3a\x27\x44\x6a\x8b\x41\x07\x7b\x53\x39\x4a\xb0\x8e\x74\x82\x7a\x53\xbf\x88\xd3\x3d\x55\xe0\x2a\xc9\x2e\x87\xb3\x8c\x34\xbf\x3c\xbf\xce\xd7\xef\xac\x19\xfe\xf6\x23\x35\xec\x48\xde\xf4\x3f\x6b\x57\x4e\x52\xf3\x2f\xf1\xef\x00\x00\x00\xff\xff\x81\x37\x3a\x2f\x13\x01\x00\x00")

func assetsJaegerAgentserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsJaegerAgentserviceYaml,
		"assets/jaeger-agentService.yaml",
	)
}

func assetsJaegerAgentserviceYaml() (*asset, error) {
	bytes, err := assetsJaegerAgentserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/jaeger-agentService.yaml", size: 275, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0xb2, 0xea, 0xd0, 0x7e, 0x78, 0x3c, 0xb0, 0xdb, 0xbe, 0xc9, 0x2e, 0xf2, 0xe7, 0x14, 0xab, 0x21, 0x71, 0xbf, 0x1c, 0xed, 0x9c, 0x79, 0x16, 0xdd, 0xb5, 0x60, 0xa0, 0x3b, 0xf2, 0x27, 0x8}}
	return a, nil
}

var _assetsJaegerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x6f\xdb\x46\x10\xbd\xeb\x57\x0c\x7c\xa7\x28\xd6\xaa\xd0\x2e\xe0\x83\x51\x1b\xee\xa1\xb5\x85\x4a\x36\xd0\x93\x31\x5a\x8e\xa9\x8d\xf6\xcb\xb3\x4b\x22\xcc\xaf\x0f\x28\x46\xd4\x32\x56\x14\xfb\x12\x9e\x84\x37\xfb\xde\x3c\xbe\x19\xae\xd0\xab\x27\xe2\xa0\x9c\x15\x80\xde\x87\xbc\x29\x26\x3b\x65\x4b\x01\x37\xe4\xb5\x6b\x0d\xd9\x38\x31\x14\xb1\xc4\x88\x62\x02\xa0\x71\x43\x3a\x74\xbf\xa0\x23\x4c\x77\xf5\x86\xd8\x52\xa4\x30\x55\x2e\xb7\x68\x48\xc0\x27\xa4\x8a\x38\x43\xad\x33\x65\x33\x67\x69\x02\x70\xbe\x12\x3c\x4a\x12\xe0\x36\x81\xb8\xc1\xe8\x58\xd5\x66\x12\x3c\xc9\xae\x11\x93\xd7\x4a\x62\x10\x50\x4c\x00\x02\x69\x92\xd1\x71\x6f\xc1\x60\x94\xdb\x7f\x12\x4f\x1f\x73\x15\x22\x63\xa4\xaa\xed\xb9\xec\xb4\x56\xb6\x7a\xf4\x25\x46\x3a\xc8\x19\xfc\xbc\xaa\xb9\x22\x01\xb3\x23\xf2\x68\xb1\x41\xa5\x71\xa3\xa9\x77\x15\xc9\x78\x3d\xb0\xd2\xc0\xba\x47\x8f\x0c\x7e\xcc\x22\xc0\x21\x87\xee\x91\xce\x46\x54\x96\x78\x50\xcb\x00\xb9\x4a\xb4\x33\xc8\xb2\x0d\x96\x15\xf1\xb4\x54\xbc\x8f\xaa\xcd\x76\xd4\x5e\xe5\x0d\x72\xde\x77\xc8\x43\x74\x4c\xf9\x8e\xda\x70\x9e\xd7\xa0\xae\xe9\x04\x73\x8f\x9f\xe4\x92\xdf\x92\x21\x46\x7d\xf5\x82\x3a\xd0\xe8\x88\x74\xba\x9f\xdd\xf4\xb5\xa6\x9a\xb2\xa0\xbe\xd0\xd5\x7c\x36\x9b\x0d\xa7\xc8\x36\xe9\x9b\xf4\xa9\xac\x96\xd7\xf7\xcf\xab\xf5\xc3\x7f\xd7\x77\xb7\xcf\xeb\xff\x97\xb7\xc3\x09\x80\xbd\x11\x01\x7d\xf3\x01\x57\x06\xab\x21\xce\xc8\x28\x95\xad\xf2\x63\xaa\xa2\x98\x16\xf3\xe9\xb1\xab\x56\x0d\x59\x0a\x61\xc9\x6e\x43\x22\x51\x7f\x41\xa5\x6b\xa6\xf5\x96\x29\x6c\x9d\x2e\x05\xcc\x93\xea\x36\x46\x7f\x47\x31\x25\x00\x78\x8c\x5b\x01\xf9\x18\x73\x1c\x05\x14\xf3\xdf\x16\x7f\x8e\xf0\x20\xbb\xac\x04\xfc\xbd\x5e\x2f\x93\x82\x27\x56\xae\x5c\x91\x74\xb6\x0c\x02\x2e\x8f\x46\xcf\x6d\xc9\xa1\xd1\x68\x15\x86\x75\x59\x1e\x2c\xfc\x3e\x4b\x3a\xf5\x7a\x15\x7b\x79\x96\x33\xb2\xdd\x73\xb0\x34\xca\x66\x5d\x02\x67\x98\x8b\xc5\x1f\x8b\x37\xcc\xd7\x9a\xb8\x1d\x50\x26\x2c\xd5\x3b\xb3\xbf\xfc\x05\xd9\x2b\xab\xa2\x42\x7d\x43\x1a\xdb\x61\x02\xc5\xec\x5d\xd3\x61\x0a\xae\x66\x49\x21\x75\xa5\x95\x51\x31\x8c\x7d\x4a\x5f\x0b\xb8\x98\x5f\x8c\x40\x43\xc6\x71\x2b\x60\x7e\xa7\x12\x9c\xe9\xb5\xa6\x70\x5a\xa0\x38\x2d\x50\x24\x02\x8d\xd3\xb5\xa1\x7f\x5d\x6d\xc7\x7b\x61\x3a\x64\xd9\xc7\xf5\xfd\xc7\xfd\x66\x62\xdf\xf6\x6d\x5f\xcc\xba\x6b\x6d\xe4\x0f\xcb\x07\xab\x5b\x01\xe9\xe7\xde\xb7\x4d\xae\xa8\x9f\x09\xf9\xee\x3f\x28\x44\xb2\xf1\x69\x4f\xfd\x4b\xa3\x32\xe9\x3b\xcb\x0e\xb8\xff\x81\xca\xd7\x00\x00\x00\xff\xff\xcd\xc8\x5a\xc1\xc5\x06\x00\x00")

func assetsJaegerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsJaegerDeploymentYaml,
		"assets/jaeger-deployment.yaml",
	)
}

func assetsJaegerDeploymentYaml() (*asset, error) {
	bytes, err := assetsJaegerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/jaeger-deployment.yaml", size: 1733, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbb, 0xea, 0xf6, 0xcc, 0x78, 0x21, 0x6a, 0x1e, 0xdb, 0x24, 0x8, 0x1d, 0xa1, 0x24, 0xac, 0x4e, 0xb1, 0x68, 0x78, 0x6, 0xd6, 0xfb, 0x92, 0x23, 0x71, 0x55, 0x9d, 0x71, 0x3c, 0xbb, 0x64, 0xfd}}
	return a, nil
}

var _assetsJaegerHeadlessserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x31\x6e\xc3\x30\x0c\x45\x77\x9d\x82\x17\x50\xda\x14\xed\xa2\x1b\x74\x29\x02\x14\xe8\x4e\xcb\x1f\xae\x1a\x59\x14\x48\xda\xe7\x2f\xec\x78\xf1\x98\x8d\xe4\x27\x1e\x1f\xb9\x97\x1f\xa8\x15\x69\x89\xd6\x6b\xb8\x97\x36\x26\xfa\x86\xae\x25\x23\xcc\x70\x1e\xd9\x39\x05\xa2\xca\x03\xaa\x6d\x15\x11\xf7\x7e\xb9\x2f\x03\xb4\xc1\x61\x97\x22\x2f\x8d\x67\x24\xfa\x63\x4c\xd0\xc8\xb5\xc6\xd2\xa2\x34\x04\xa2\x53\x92\xa5\x56\x64\x17\x8d\xbf\xe0\xb1\xc2\xec\xd8\xb0\xce\x19\x89\x64\x30\xe8\xca\x2e\x5a\x96\x39\x58\x47\xde\x0e\xe6\xba\x98\x43\x3f\x6f\x89\xbe\x1e\xd0\x2e\xea\xbb\x4b\x3c\xf8\x93\xf6\xbc\xab\x6d\x49\xa2\xeb\xfb\xdb\xc7\xeb\xde\x3b\xeb\x04\xbf\x9d\xa6\x86\x87\xc4\xb3\xcf\xfc\x07\x00\x00\xff\xff\x57\x7d\x14\xcd\x2c\x01\x00\x00")

func assetsJaegerHeadlessserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsJaegerHeadlessserviceYaml,
		"assets/jaeger-headlessService.yaml",
	)
}

func assetsJaegerHeadlessserviceYaml() (*asset, error) {
	bytes, err := assetsJaegerHeadlessserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/jaeger-headlessService.yaml", size: 300, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x65, 0x57, 0xce, 0xa3, 0x36, 0x2c, 0x2d, 0xba, 0xb0, 0xaa, 0xc2, 0xaa, 0x89, 0x38, 0xca, 0x4, 0xf1, 0x74, 0x92, 0xb5, 0xd1, 0x82, 0x19, 0x74, 0x2e, 0x10, 0x1e, 0x77, 0x9a, 0xed, 0x0, 0xcc}}
	return a, nil
}

var _assetsJaegerPrometheusruleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xdf\x4f\xdb\x48\x10\xc7\xdf\xf3\x57\x8c\x22\x90\xe0\x44\x02\x39\x1d\x2f\x96\x38\xe9\x04\x9c\xaa\x3e\xa5\x81\xf6\xa5\xaa\xac\x8d\x3d\x71\x96\xae\x77\x97\x99\xdd\x34\x51\x08\x7f\x7b\xb5\x6b\xc7\x0a\x3f\x54\x92\x36\x10\xfc\x84\x97\xd9\xef\x77\x66\x3e\xde\xb1\x23\xac\xfc\x82\xc4\xd2\xe8\x04\x4a\xa3\xa5\x33\x24\x75\xd1\xcd\x0c\xa1\xe1\x6e\x66\xca\xe3\x49\xaf\xf5\x5d\xea\x3c\x81\x3e\x99\x12\xdd\x18\x3d\x0f\xbc\xc2\x56\x89\x4e\xe4\xc2\x89\xa4\x05\xa0\xc4\x10\x15\x87\xbf\x00\x6c\x13\x96\x80\xb0\xb6\xc3\x84\x71\x9d\x8c\xc2\x04\x84\x42\x72\x1d\xf2\x0a\xb9\x05\xa0\x45\x89\x09\x98\x21\x23\x4d\x44\xb0\xf6\x65\xe7\x46\x60\x81\xd4\x62\x8b\x59\x10\x2c\xc8\x78\x1b\xa5\x3b\x75\x78\x15\x90\x46\x25\xae\xa4\x83\x5c\xe5\xde\xa9\x1c\x12\xf8\x18\xa3\x3e\x5c\x5f\xf7\xaf\x90\x26\x48\x97\x44\x55\x30\x80\xd0\xda\x38\xe1\xa4\xd1\xf5\xa6\x70\x95\xc8\x2c\x0a\x4c\xe0\xae\x59\x02\x98\xcf\x61\xaf\xaa\xad\x7b\x63\x86\xb0\x58\xac\xae\x48\xcd\x4e\xe8\x0c\xc3\xb2\x64\xc0\xa9\x45\x92\xa8\x33\xa9\x8b\x10\x66\x49\x6a\x37\x82\xf6\x7e\xf7\xef\x51\x1b\xf6\x26\x42\xf9\x10\xba\x0f\x21\x27\x40\x22\x43\xdc\xad\xbd\x70\x6a\x29\x81\xde\xc9\x09\xfc\x05\xec\xcb\x03\x12\x0e\x0f\x96\x75\x16\xa8\x5d\x3a\x76\xce\xa6\x1c\x2b\x49\xab\xbd\xa9\x33\x4e\xa8\xaf\xbd\xf2\xdb\xe1\x21\x0c\x67\x70\xb0\xcc\xe7\xa8\x29\xe0\xc6\x0c\x8f\x62\xd3\xd8\x8a\x0c\x0f\xe1\x78\x0d\xf1\x8d\x55\xff\x85\x5e\xfd\xaf\x91\x09\x45\x9c\x96\xf5\xed\xea\x43\x11\x2e\xc6\x09\x92\x74\xb3\x04\x7e\x08\xd2\x52\x17\xcf\x01\x1b\xf4\xcf\x07\x78\xeb\x91\x1d\x5f\xc6\x32\xdf\x07\xb3\x41\xff\x7c\x53\x6e\x99\x92\xa1\xb7\xf5\x1d\xd9\xac\x6a\x33\xd5\xd5\xcd\xd9\x09\xe7\x39\xcd\x4c\x8e\x67\xf7\xed\x7f\xa6\xd3\xbb\xd3\xe9\xb4\xbd\xa8\x5a\xdf\xd4\xf3\x00\xc1\x1a\x40\x5f\x70\xdd\x44\x7d\xbb\x60\xcf\x63\x62\x57\x56\x68\xbe\x20\x63\x2d\xe6\x1b\x93\x0d\x4f\xa8\xcc\x70\x23\xc2\x79\xf0\x7a\x89\x2e\x87\xac\xd6\x61\x4a\x68\x0d\x39\xa4\x34\xee\x98\x13\xb2\x57\xee\xec\xbe\x9d\x57\x15\xdd\x21\xd1\x92\xe0\x6f\x1f\xc9\x87\x1e\xcf\x89\x45\x91\x46\xf1\xb5\x80\xfd\x57\xfc\x29\xaf\x38\x5c\x76\x48\xab\x1a\x6e\x4d\x3f\x87\xc2\x65\x63\xe4\x74\x24\xa4\xf2\x84\xdb\x1c\xa0\x4f\x3c\xd8\x0f\x4b\xe9\x1c\xe6\xab\x26\x3b\x39\x76\x46\x29\xcc\x9c\xa1\x8b\xba\xb5\x91\xe8\xc6\x28\xb3\xa5\xcc\x0e\x71\x36\x39\x54\x27\x23\xad\x0f\xdd\x56\x30\x3e\xd6\x26\xcc\x50\x4e\x9e\x88\x37\x8a\x6f\x85\xef\x4a\x94\x56\x49\x5d\x7c\xb6\xb9\x70\xf8\xbf\x90\x6a\x19\xf8\x5a\xaf\xc4\x51\xe5\xf1\x4b\x64\x52\x83\x0f\x09\x85\x38\xae\x33\x04\x6b\x94\xcc\x24\xae\x85\x32\x6e\x42\x4a\x6f\x7d\x78\xfd\x36\x83\xb4\xbd\x8d\xf9\xf9\x48\x7b\x77\x03\xf4\x7a\x4c\xc6\xb9\xf7\x4d\xcf\x35\x39\x6e\xc4\xaf\xde\x86\x94\x46\xa5\x2d\x13\x7c\xa2\xbe\x3b\x86\x9f\x3c\xd2\x6c\x80\xb7\xfc\x16\xf0\x18\xf1\x25\x76\xe1\xa1\x9e\xd5\x1f\xa1\x60\xf4\xaa\x98\xb1\x48\x31\x25\x58\x2c\xd6\x61\x18\xa5\x9a\x0f\xc3\x6a\xd0\x6d\x15\xe3\x73\x06\x6f\xf4\xc3\xe2\x67\x00\x00\x00\xff\xff\x05\xc8\xd8\x27\xd6\x0e\x00\x00")

func assetsJaegerPrometheusruleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsJaegerPrometheusruleYaml,
		"assets/jaeger-prometheusRule.yaml",
	)
}

func assetsJaegerPrometheusruleYaml() (*asset, error) {
	bytes, err := assetsJaegerPrometheusruleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/jaeger-prometheusRule.yaml", size: 3798, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3b, 0x1b, 0x96, 0x2, 0xfa, 0xbd, 0xf0, 0xf6, 0x81, 0x71, 0x34, 0xc9, 0xea, 0x24, 0x9d, 0xe8, 0x20, 0x45, 0x5f, 0x3e, 0xb4, 0xaf, 0xc9, 0x33, 0x93, 0xfb, 0xd, 0x12, 0x42, 0x85, 0xd3, 0x97}}
	return a, nil
}

var _assetsJaegerQueryserviceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8e\x31\x0e\x83\x30\x0c\x45\xf7\x9c\xc2\x17\x08\x15\x0b\xaa\x72\x8a\x4a\x95\xba\x9b\xf0\x85\x52\x42\x92\x3a\x06\xa9\xb7\xaf\xa0\x74\x60\xec\x66\xff\x27\xfb\x7d\x2e\xe1\x01\xa9\x21\x27\x47\x6b\x6b\xa6\x90\x06\x47\x77\xc8\x1a\x3c\xcc\x0c\xe5\x81\x95\x9d\x21\x8a\xdc\x23\xd6\x6d\x22\xe2\x52\x9a\x69\xe9\x21\x09\x8a\xda\x84\x7c\x49\x3c\xc3\xd1\x93\x31\x42\x2c\xc7\x68\x43\xb2\x39\xc1\x10\x9d\xc8\x6b\x81\xbc\x8f\xb0\x16\xf6\x70\x94\xfb\x0a\x59\x59\xb3\x84\x65\x36\xb5\xc0\x6f\x8e\x92\x45\x77\x99\x3d\x1e\xfc\x2e\xbf\xc8\x51\xdb\x75\xd7\x6e\xdf\x95\x65\x84\xde\x4e\x69\x45\x84\xd7\x2c\xff\xd6\xfd\x04\x00\x00\xff\xff\x80\x45\xe3\x3b\x0e\x01\x00\x00")

func assetsJaegerQueryserviceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsJaegerQueryserviceYaml,
		"assets/jaeger-queryService.yaml",
	)
}

func assetsJaegerQueryserviceYaml() (*asset, error) {
	bytes, err := assetsJaegerQueryserviceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/jaeger-queryService.yaml", size: 270, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x46, 0x3a, 0x71, 0x82, 0x7f, 0x36, 0x8b, 0xd3, 0xef, 0x8d, 0xb, 0x89, 0xb3, 0x16, 0xd4, 0x7f, 0xd5, 0x7b, 0x0, 0x7b, 0x41, 0xa, 0x7a, 0x58, 0xed, 0x53, 0x9f, 0xb1, 0x86, 0x55, 0x2f, 0x43}}
	return a, nil
}

var _assetsJaegerVolumeclaimYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xbb\x4e\x44\x31\x0c\x44\xfb\x7c\x85\x7f\x20\x0b\x14\x34\x69\xb7\xa0\xe2\x21\x8a\xa5\xf6\x4d\x46\xab\xb0\x79\x61\x3b\xfb\xfd\x28\x57\x57\x48\x74\x1e\x8f\x34\xe7\xf0\xc8\x17\x88\xe6\xde\x02\xdd\x9f\xdc\x2d\xb7\x14\xe8\x63\x7d\xd4\xd0\xec\xd2\xcb\xac\x38\x17\xce\xd5\x55\x18\x27\x36\x0e\x8e\xa8\xf0\x86\xa2\xeb\x22\xe2\x31\x4e\xb7\xb9\x41\x1a\x0c\x7a\xca\xfd\xa1\x71\x45\xa0\x6f\xc6\x15\xe2\xb9\x14\x9f\x9b\xef\x0d\x8e\xe8\x5f\xa3\xd6\x05\x7e\x4d\x1e\x8d\x0e\x8e\x08\xd4\x37\x85\xdc\xd9\xba\xe4\x59\x9d\x0e\xc4\x05\xe2\x18\xa1\xfa\xda\x13\x76\xae\xa7\x4f\x70\xfa\x92\x6c\x78\x6f\x71\x6d\x0b\xb4\x4f\x89\x38\xb4\x04\x3f\x13\x6a\x47\x22\x5a\x34\xbe\x22\xd0\xf3\xe3\x4b\x76\x7f\xf9\x5c\x58\xf5\x6d\xd7\x52\xe3\x96\x58\x92\xfb\x0d\x00\x00\xff\xff\x47\x4d\xb4\xe7\x15\x01\x00\x00")

func assetsJaegerVolumeclaimYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsJaegerVolumeclaimYaml,
		"assets/jaeger-volumeClaim.yaml",
	)
}

func assetsJaegerVolumeclaimYaml() (*asset, error) {
	bytes, err := assetsJaegerVolumeclaimYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/jaeger-volumeClaim.yaml", size: 277, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0xd1, 0x38, 0x31, 0xbe, 0x6a, 0x63, 0xde, 0xb2, 0x42, 0x60, 0x88, 0x5, 0xeb, 0x3b, 0x19, 0x9b, 0x33, 0x74, 0x13, 0x2d, 0x76, 0x8b, 0x5c, 0x9d, 0xb7, 0x1, 0xca, 0xd6, 0xc1, 0xf8, 0x60}}
	return a, nil
}

var _assetsObservatoriumApiDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x6e\xdc\x3a\x0c\xbc\xfb\x2b\x88\xdc\x6d\xaf\x93\xf7\x1e\xb2\x02\x72\x0b\x90\x77\x68\x81\x00\x49\x7a\xe7\xca\xec\x9a\x88\x2c\x29\x14\xed\xd4\x7f\x5f\x28\xe9\x3a\x76\xbb\x4d\x37\xa8\xf6\xb2\x26\xcd\x99\xe1\x68\x8c\x91\xbf\x90\x24\x0e\xde\x00\xc6\x98\xea\xb1\x29\x1e\xd9\xb7\x06\xae\x29\xba\x30\xf5\xe4\xb5\xe8\x49\xb1\x45\x45\x53\x00\x38\xdc\x91\x4b\xf9\x1f\xe4\x81\xea\x71\xd8\x91\x78\x52\x4a\x15\x87\xda\x63\x4f\x06\xc2\x2e\x91\x8c\xa8\x41\x78\xe8\x4b\x8c\x5c\x00\xbc\xdf\x49\x11\xed\xcf\xed\x22\x45\xb2\x99\x48\x28\x3a\xb6\x98\x0c\x5c\x14\x00\x89\x1c\x59\x0d\xf2\x2a\xa1\x47\xb5\xdd\xa7\x85\xa6\x8f\xa9\x4a\x2a\xa8\xb4\x9f\x5e\x67\x25\x38\xc7\x7e\xff\x10\x5b\x54\x3a\xc0\xf5\xf8\xed\x6e\x90\x3d\x19\xd8\xbc\x55\x1e\x3c\x8e\xc8\x0e\x77\x8e\x0c\x34\x05\x80\x52\x1f\xdd\x3c\xb5\x34\x2c\x1f\xb7\x12\xf8\x31\x89\x00\x07\x1f\xf2\xb1\xc1\x2b\xb2\x27\x99\xd1\x4a\x40\xd9\x2f\xb0\x4b\x28\xcb\x67\xda\x55\x8e\x93\x92\xbf\xda\x54\x2f\x3f\x73\xb9\xb9\xdc\xac\xde\xe9\x49\x85\x6d\xaa\x06\xae\xc8\xb7\x31\xb0\xd7\xab\x4e\x35\x9a\xba\xd6\x0e\x7d\x48\xe5\xd3\x40\xc2\x24\xd5\x4a\x55\x95\x46\x5b\x59\x37\x24\x25\xa9\x5c\xb0\xe8\xcc\x76\xb3\x3d\x0e\x9d\x01\xa6\x5f\xd0\xd7\x4b\x5a\xb4\x1d\x9d\x44\x51\x63\xe4\x7a\x6c\xea\x17\xd4\xa3\x7c\xcf\xc2\x4a\xbf\xdb\x46\xc8\x12\x8f\x7f\xa6\x6a\xb6\xe7\xdb\xe6\xc0\xf5\x63\x68\xc5\xe6\xc2\xbe\x72\x34\x92\xbb\x7a\x46\xf1\x73\x8b\x7b\xcc\x21\x79\x1a\x70\xca\x17\xba\xa2\x59\x3f\x99\x1c\x94\xa4\xf3\xa4\xe3\x91\x3c\xa5\x74\x2b\x61\x47\x6f\x17\x09\xf0\x15\xd9\x0d\x42\xf7\x9d\x50\xea\x82\x6b\x0d\xfc\xb3\xe8\xe6\xf5\x6e\x48\x97\x03\x00\x11\xb5\x33\x50\x97\x75\x47\xe8\xb4\x9b\xd6\xcd\x20\x6a\x60\x95\x84\x97\x7c\xd9\x8e\x72\xfa\xfe\xbf\xbf\xbf\x5d\x34\x22\x09\x87\xf6\x8e\x6c\xf0\x6d\xfe\xf6\xde\x86\xde\x0b\xeb\x81\x67\x95\xc8\x39\xb5\xb7\xc7\x14\xbc\xc2\xe5\x75\xe6\xa2\x10\xb6\x7c\xa2\x27\x17\x27\x7b\x92\x51\xff\xc6\x11\xf6\xac\x8c\xee\x9a\x1c\x4e\xb3\x2f\xcd\xe6\x24\xcf\x84\x52\x18\xc4\x52\x5a\x6a\x73\xdc\xb3\xa6\xb5\x5a\x1b\x07\x03\x67\xe7\x67\xab\x62\x4f\x7d\x90\xc9\x40\x73\xc3\x8b\xba\xd0\xd3\x40\xe9\x38\x40\x73\x1c\xe0\xfc\xdf\xff\x3e\x73\xf1\x3d\x00\x00\xff\xff\xa2\x60\x65\xa9\xf6\x05\x00\x00")

func assetsObservatoriumApiDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsObservatoriumApiDeploymentYaml,
		"assets/observatorium-api-deployment.yaml",
	)
}

func assetsObservatoriumApiDeploymentYaml() (*asset, error) {
	bytes, err := assetsObservatoriumApiDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/observatorium-api-deployment.yaml", size: 1526, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaf, 0xc3, 0xd, 0xbd, 0x24, 0xfe, 0xa0, 0xa5, 0xe7, 0x98, 0xe7, 0x3b, 0x26, 0x5f, 0x89, 0x7b, 0x70, 0xc7, 0xd7, 0x71, 0x17, 0xaf, 0x56, 0xf8, 0xa2, 0x79, 0x13, 0x44, 0xc4, 0x9, 0x94, 0xe7}}
	return a, nil
}

var _assetsObservatoriumApiServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x8d\x31\xae\x83\x40\x0c\x44\xfb\x3d\x85\x2f\x00\x9f\xdf\xa1\x3d\x45\xa4\x48\xe9\x0d\x8c\x12\x8b\xb0\x6b\xd9\x66\xcf\x1f\x41\x52\xa4\x49\x37\x33\xef\x49\xc3\x2a\x37\x98\x4b\x2d\x99\xda\x7f\x5a\xa5\x2c\x99\xae\xb0\x26\x33\xd2\x86\xe0\x85\x83\x73\x22\x2a\xbc\x21\x53\x9d\x1c\xd6\x38\xaa\xc9\xbe\x75\xac\x92\x5c\x31\x1f\x5c\xab\x85\x1f\xa1\xfb\xa8\x8f\x08\x4d\x44\x6f\x92\x69\x1c\xc6\xe1\xac\xc1\x76\x47\x5c\xbe\x47\xc7\x13\x73\x54\xcb\xa7\xc0\xaa\xfd\xba\x4f\xb0\x82\x80\xf7\x52\xff\x7e\x7d\xbf\x02\x00\x00\xff\xff\x94\x9c\xbf\x70\xbd\x00\x00\x00")

func assetsObservatoriumApiServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsObservatoriumApiServiceYaml,
		"assets/observatorium-api-service.yaml",
	)
}

func assetsObservatoriumApiServiceYaml() (*asset, error) {
	bytes, err := assetsObservatoriumApiServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/observatorium-api-service.yaml", size: 189, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x15, 0x93, 0x32, 0x11, 0xf8, 0x56, 0x7c, 0x8c, 0x21, 0xed, 0xea, 0xee, 0xb0, 0x99, 0x34, 0xe5, 0x98, 0xab, 0x9f, 0x71, 0x99, 0x1a, 0x9e, 0x69, 0x6f, 0xb9, 0xae, 0xe4, 0x55, 0xfe, 0x16, 0x13}}
	return a, nil
}

var _assetsTelemeterMemcachedServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\x4d\x4a\x05\x41\x0c\x84\xf7\x7d\x8a\x5c\xe0\x3d\x6d\xc1\x85\x7d\x03\x37\xf2\x40\x70\x9f\xc9\x14\xda\x4c\xff\x91\x64\xe6\xfc\x32\xc3\x20\x8a\x2e\xdc\x25\x5f\xa8\x4a\x15\x8f\xfc\x06\xb5\xdc\x5b\xa2\x2d\x86\x25\xb7\x39\xd1\x2b\x74\xcb\x82\x50\xe1\x3c\xb3\x73\x0a\x44\x85\x27\x14\xdb\x27\x22\x1e\xe3\xba\xac\x13\xb4\xc1\x61\xd7\xdc\xef\x1a\x57\x24\xaa\xa8\xc2\xf2\x81\x39\x10\xfd\x4d\x6c\xb0\x20\x51\x9f\x0c\xba\xb1\x77\xcd\x6b\x0d\x36\x20\xbb\xb1\x94\xd5\x1c\xfa\x7c\x4b\xf4\xd2\x1b\x02\xd1\xe8\xea\xc7\xcf\xcb\xe9\x27\x25\xa3\xf9\x11\x62\xbf\x25\x8a\xf1\x21\xc6\x63\x77\xd6\x77\xf8\xed\x07\xbd\x7c\xc5\x70\xcd\x62\xdf\x74\x4f\xf1\xf1\xfe\x97\xec\x84\x86\x02\xf1\xae\xff\x2d\xfb\x19\x00\x00\xff\xff\xec\x23\x7b\xc1\x44\x01\x00\x00")

func assetsTelemeterMemcachedServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTelemeterMemcachedServiceYaml,
		"assets/telemeter-memcached-service.yaml",
	)
}

func assetsTelemeterMemcachedServiceYaml() (*asset, error) {
	bytes, err := assetsTelemeterMemcachedServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/telemeter-memcached-service.yaml", size: 324, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0xbd, 0x96, 0xff, 0x68, 0x49, 0x39, 0x6d, 0x23, 0xd7, 0xbc, 0xda, 0x46, 0x8d, 0xeb, 0xfd, 0x5d, 0x20, 0xf5, 0xaf, 0x75, 0x59, 0x98, 0x1e, 0x58, 0xc2, 0xb0, 0xa2, 0xcb, 0xac, 0x7d, 0xae}}
	return a, nil
}

var _assetsTelemeterMemcachedServicemonitorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8f\xb1\x4e\x03\x41\x0c\x44\xfb\xfd\x0a\xff\x00\x17\x10\xdd\x7e\x43\xa8\x90\xe8\x7d\xbe\x11\x31\xb9\x5d\xaf\x6c\xe7\xbe\x1f\x6d\xd2\x50\x80\x44\x37\x1a\x8d\x66\xde\xf0\xd0\x0f\x78\xa8\xf5\x4a\xcd\xba\xa6\xb9\xf6\xcf\x45\xcc\x61\xb1\x88\xb5\xd3\xf1\x52\xae\xda\xb7\x4a\xef\xf0\x43\x05\x6f\x8f\x54\x69\x48\xde\x38\xb9\x16\xa2\x9d\x57\xec\x31\x15\x11\x8f\xb1\x5c\x6f\x2b\xbc\x23\x11\x8b\xda\xa9\x73\x43\xa5\x86\x26\x2c\x17\x6c\x85\xe8\x77\x27\x06\x0b\x2a\xd9\x1a\xf0\x83\x27\xc9\xad\x95\x18\x90\x59\x8c\xbe\x0d\xd3\x9e\xf7\x95\x27\xd2\x9e\x33\xb4\x57\x7a\x7d\x8e\xfb\xee\x30\xcf\xd9\x99\xae\x32\x9d\x2f\x5b\xcf\x13\xab\xfe\x41\x54\x88\x02\x3b\x24\xcd\x1f\xe0\x8d\x53\x2e\xe7\x1f\x4f\xfe\xf3\xe5\x3b\x00\x00\xff\xff\x79\x6b\xf3\x8b\x40\x01\x00\x00")

func assetsTelemeterMemcachedServicemonitorYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTelemeterMemcachedServicemonitorYaml,
		"assets/telemeter-memcached-serviceMonitor.yaml",
	)
}

func assetsTelemeterMemcachedServicemonitorYaml() (*asset, error) {
	bytes, err := assetsTelemeterMemcachedServicemonitorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/telemeter-memcached-serviceMonitor.yaml", size: 320, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xc7, 0x3d, 0x51, 0x63, 0xf6, 0xf7, 0x8b, 0x16, 0x29, 0x8e, 0xc2, 0xa5, 0x2b, 0xf0, 0x53, 0x22, 0xb4, 0x7d, 0x79, 0xc6, 0xa4, 0x30, 0xd3, 0xca, 0xa8, 0xbb, 0x58, 0x9c, 0x62, 0x94, 0x32}}
	return a, nil
}

var _assetsTelemeterMemcachedStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xcf\x8e\xd4\x30\x0c\xc6\xef\x7d\x0a\x6b\xef\xcd\x36\xdd\x19\xc4\x46\xe2\x01\x90\x00\x21\xad\xc4\xdd\x4d\xcd\x4e\x34\xf9\x87\xe3\x0e\xf0\xf6\x28\xc0\x64\x5b\x6d\x57\x9a\xf4\xd2\x7c\x76\x7e\xfe\x6c\x63\x76\xdf\x88\x8b\x4b\xd1\x00\xe6\x5c\xee\x2f\x7a\x22\xc1\xb1\x3b\xbb\x38\x1b\x78\x12\x14\xfa\xbe\xf8\x27\x92\x2e\x90\xe0\x8c\x82\xa6\x03\xf0\x38\x91\x2f\xf5\x0f\xea\x33\x75\x5e\x26\xe2\x48\x42\x45\xb9\x74\x1f\x31\x90\x81\x40\xc1\xa2\x3d\xd1\xdc\x01\xec\x2b\x25\xa3\x25\x03\x69\x2a\xc4\x17\x94\xc4\x6e\x09\x5d\xc9\x64\x2b\x98\x29\x7b\x67\xb1\x18\xd0\x1d\x40\x21\x4f\x56\x12\xff\x2b\x19\x50\xec\xe9\xd3\xca\xc3\x6d\x2e\x6a\x19\x67\xe9\xcb\xab\x80\x50\xc8\x1e\x85\xfe\xd3\x57\x8d\xd6\xe3\x37\x85\x6e\x2b\x05\x70\xed\xa3\x1e\x9b\xa2\xa0\x8b\xc4\x8d\xd2\x03\xf2\xf3\x8a\xd9\x43\x1f\x40\x0f\xe3\x61\xad\x7c\x04\x1d\xd6\x77\xfb\x2a\xe3\xd2\x2e\x2e\xe0\x33\x19\x98\x93\x3d\x13\x57\x4f\xcd\x8d\xd1\xea\xa8\xc6\xa1\x47\x9f\x5d\xa4\xf6\x60\xcf\x73\x3d\x39\xb1\x6c\x8c\x35\xf3\x5f\x13\x8b\x01\xad\x47\xad\x5b\xf8\xca\xb1\xde\x51\x94\x26\x33\x95\xb4\xb0\xa5\x15\x08\xc0\xbb\xe0\x64\xa3\x00\xd8\xbc\x18\xb8\x7b\xb8\xdb\x88\x81\x42\xe2\xdf\x06\xf4\xfb\xc3\xe1\xb3\x5b\x85\x98\x7e\x2c\x54\x76\x19\xc7\x61\x08\xfb\x90\x87\xf1\xb1\x41\x76\xc6\xde\xb7\x11\x28\x9c\x67\xa6\x52\x3e\xf8\x64\xd1\x9f\x52\x11\xb3\x6d\xb6\x66\xff\xa4\x49\x79\x57\x84\x62\x7f\x4d\x1f\xd4\xdf\xcf\x3c\xea\xe3\xf0\xf6\x3e\x32\xa7\xf0\xb2\x94\x9e\x7e\xd5\x41\x13\x9b\xcb\xa0\xde\xa9\xe1\xad\xb5\xb4\xbc\x9b\xf7\xb3\x71\xf1\xc2\x13\x76\xb6\x74\x7f\x02\x00\x00\xff\xff\xaf\x57\xab\xa4\xef\x03\x00\x00")

func assetsTelemeterMemcachedStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTelemeterMemcachedStatefulsetYaml,
		"assets/telemeter-memcached-statefulSet.yaml",
	)
}

func assetsTelemeterMemcachedStatefulsetYaml() (*asset, error) {
	bytes, err := assetsTelemeterMemcachedStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/telemeter-memcached-statefulSet.yaml", size: 1007, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6d, 0xb9, 0x4f, 0x12, 0x57, 0xca, 0xbc, 0xbe, 0xe6, 0x3b, 0xf1, 0x7b, 0xf5, 0xd0, 0xff, 0xd7, 0xa1, 0x11, 0x84, 0xa2, 0xd3, 0x1a, 0xd3, 0xc7, 0x67, 0x2a, 0x8a, 0xa0, 0x19, 0xf, 0x66, 0x48}}
	return a, nil
}

var _assetsTelemeterSecretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcc\xbd\x8a\xc3\x40\x0c\x04\xe0\x7e\x9f\x42\xb8\x77\x71\xdd\xb1\x2f\x71\xc5\x41\x5a\x23\xef\x4e\x21\xbc\x7f\x91\x64\x43\xde\x3e\xd8\x24\xa4\x4a\x27\x7d\x33\x0c\x0f\xb9\x41\x4d\x7a\x8b\x74\xfc\x84\xcc\xce\x31\x10\xa5\x22\x68\xbe\x48\x8e\x34\x4d\x9f\xdf\x90\x14\xfe\xb2\x2e\x39\x2d\x62\xb6\x43\x2f\xd9\xa4\xe5\x48\xff\x57\x25\x54\x38\xbf\xc7\x0a\xaf\x28\x76\x5e\x44\xdb\xaf\xcd\x3c\x46\x24\x47\x41\x85\x43\x67\x83\x1e\xd0\x40\xd4\xb8\xe2\x6b\x60\x83\x13\x22\xf5\xf5\x54\xf6\xae\xb2\xd7\xe0\x8f\x81\x48\x7f\x83\xef\x3b\xc2\x33\x00\x00\xff\xff\x12\xfb\xd7\x70\xcb\x00\x00\x00")

func assetsTelemeterSecretYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTelemeterSecretYaml,
		"assets/telemeter-secret.yaml",
	)
}

func assetsTelemeterSecretYaml() (*asset, error) {
	bytes, err := assetsTelemeterSecretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/telemeter-secret.yaml", size: 203, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0x8d, 0xa4, 0x60, 0x14, 0x8d, 0x13, 0xa, 0xcb, 0x90, 0x34, 0x72, 0x22, 0x8, 0xbc, 0x68, 0xb4, 0x7c, 0x69, 0x1f, 0x83, 0x39, 0x81, 0x96, 0xf1, 0x37, 0xa0, 0x2a, 0x63, 0x37, 0x18, 0x1e}}
	return a, nil
}

var _assetsTelemeterServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x90\x41\x4e\xc3\x30\x10\x45\xf7\x3e\xc5\x5c\xc0\x85\x42\x17\x95\x6f\xc0\x06\x55\x42\x62\x3f\x75\x3e\x8d\x55\x67\x6c\x8d\xa7\x15\xc7\x47\x0e\xa9\x28\x0a\x12\xab\x68\xe6\xbf\xf7\x33\x32\xd7\xf4\x0e\x6d\xa9\x48\xa0\xeb\xd6\x9d\x93\x0c\x81\xde\xa0\xd7\x14\xe1\x26\x18\x0f\x6c\x1c\x1c\x11\x8b\x14\x63\x4b\x45\x5a\x1f\x89\xda\x37\xb4\xe1\x5c\x47\xde\x94\x0a\x69\x63\xfa\xb0\x4d\x2a\x0f\x73\x24\x27\x1f\xa1\xe6\x1b\xa2\xc2\xbc\xf0\x84\x40\x86\x8c\x09\x06\xf5\x9d\xe9\x9f\x91\x15\x83\x23\xca\x7c\x44\x5e\xaa\xcf\xfb\xe6\xb9\xd6\x35\xee\x88\xfe\xee\x59\x82\x56\x39\x22\x50\x39\xf6\x2d\x5b\xd1\x74\x99\x5c\xab\x88\xbd\x37\xe6\x4b\x33\xe8\xcb\x21\xd0\x6b\x11\x38\xa2\x5a\xd4\xe6\x5f\xfa\xa5\x16\x9f\x06\x15\xce\xf3\x15\x3d\x0d\xb4\xdf\xed\x9e\xe7\xd1\x58\x4f\xb0\xc3\xbc\xbc\xe3\x6e\x6a\x92\xb5\xfa\xb8\xdf\xae\xd4\x3b\xee\xa6\x2e\x87\xfd\x36\x9f\x56\xe6\x0f\xd6\x90\x11\xad\xe8\x7f\xaf\xf5\x15\x00\x00\xff\xff\xa1\x1b\xab\xdf\xdd\x01\x00\x00")

func assetsTelemeterServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTelemeterServiceYaml,
		"assets/telemeter-service.yaml",
	)
}

func assetsTelemeterServiceYaml() (*asset, error) {
	bytes, err := assetsTelemeterServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/telemeter-service.yaml", size: 477, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x38, 0x5a, 0x8f, 0x34, 0x7, 0x8, 0xf4, 0x9d, 0xe3, 0x18, 0x58, 0xa, 0xab, 0x8e, 0x45, 0x71, 0xbf, 0xa6, 0x48, 0xad, 0x6d, 0x81, 0xee, 0x94, 0xbf, 0xa3, 0x2b, 0xe0, 0x96, 0x62, 0xc4, 0x3}}
	return a, nil
}

var _assetsTelemeterServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc9\x31\x0e\x02\x41\x08\x05\xd0\x7e\x4e\xc1\x05\x2c\x6c\xe9\x3c\x83\x89\x3d\xb2\xbf\x20\x0a\x6c\x18\x66\xce\x6f\x4c\xb6\x7d\x4f\x4e\x7b\xa1\xa6\x65\x30\xed\xfb\xf8\x58\x1c\x4c\x4f\xd4\x36\xc5\x43\x35\x57\xf4\x70\xb4\x1c\xd2\xc2\x83\x28\xc4\xc1\xd4\xf8\xc2\xd1\xa8\xdb\x44\x6d\xd4\x15\xf3\x14\x05\x53\xbe\xff\x2a\x9d\x65\xcb\xc7\x2f\x00\x00\xff\xff\x98\xbe\x66\x30\x62\x00\x00\x00")

func assetsTelemeterServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTelemeterServiceaccountYaml,
		"assets/telemeter-serviceAccount.yaml",
	)
}

func assetsTelemeterServiceaccountYaml() (*asset, error) {
	bytes, err := assetsTelemeterServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/telemeter-serviceAccount.yaml", size: 98, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0x87, 0xf7, 0x39, 0xc7, 0x40, 0x36, 0xe, 0x4c, 0x53, 0x2a, 0xef, 0x67, 0xa8, 0xea, 0x25, 0x51, 0x86, 0x6f, 0xda, 0x11, 0x19, 0xee, 0xe0, 0xcd, 0x3e, 0x25, 0xac, 0xec, 0x1f, 0x50, 0x84}}
	return a, nil
}

var _assetsTelemeterServicemonitorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x31\x6f\xdc\x30\x0c\x85\x77\xff\x0a\xfe\x01\xdb\x2d\xba\x14\x5a\x0b\x74\xba\x76\x49\x90\x9d\xe6\x31\x77\x8a\x25\x51\x20\x69\xff\xfe\x40\xd6\x1d\x90\x00\x49\x86\x6c\xf6\x13\xc5\xf7\xe9\x3d\xac\xf1\x89\xd5\xa2\x94\x00\x59\x4a\x74\xd1\x58\x2e\x13\x89\xb2\xd8\x44\x92\xe7\xfd\xe7\xb0\xc6\x72\x0e\xf0\xc0\xba\x47\xe2\x7f\x7d\x6a\xc8\xec\x78\x46\xc7\x30\x00\x24\x5c\x38\x59\xfb\x02\xe0\x72\xae\x12\x8b\x07\xc8\xec\x1a\xc9\x0e\x75\xfd\x6d\x23\xd6\x1a\xc0\x39\x71\x66\x67\x1d\x8d\x75\x67\x1d\x00\x0a\x66\xfe\xf4\xc0\x2a\x12\x07\x90\xa5\xa9\xd8\xf0\xb6\x3c\x58\x65\x6a\x6e\x77\xaf\xc3\x7a\x84\x85\x51\x59\x1f\x65\xe5\xf2\x37\x26\x0e\x30\xef\xa8\xb3\x6e\x65\x36\x26\x65\xb7\x79\xdd\x16\xd6\xc2\xce\x36\x45\x99\xad\xbf\x08\x89\x64\x2b\x3e\x7b\xbb\x78\xd0\xc6\xe2\xcd\x2d\x05\xf8\xf5\xa3\xf3\x57\x51\x0f\x5d\x2f\x98\x0e\xc9\xe8\xca\x0d\xfc\xea\x5e\xfb\x90\x27\xfb\x23\xe5\x39\x5e\x7a\x12\x00\x84\xdf\xe1\xb8\xfd\x8e\x84\x13\xa9\xdf\x56\xf5\x50\xfe\x7f\x18\xd5\xf4\x2e\x9d\xc9\x76\x1a\x00\x5e\x64\x39\xb5\x5a\xc2\x3d\xfb\xa1\x2d\x49\x4c\x2e\xda\xf9\x32\x3a\x5d\x4f\x6f\xaa\xfb\xaa\xa6\xd7\x00\x00\x00\xff\xff\xec\x40\xf2\x69\x29\x02\x00\x00")

func assetsTelemeterServicemonitorYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTelemeterServicemonitorYaml,
		"assets/telemeter-serviceMonitor.yaml",
	)
}

func assetsTelemeterServicemonitorYaml() (*asset, error) {
	bytes, err := assetsTelemeterServicemonitorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/telemeter-serviceMonitor.yaml", size: 553, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x88, 0xa9, 0xf1, 0x9f, 0xf1, 0xfc, 0xfb, 0xe0, 0x1d, 0x27, 0x1c, 0x2f, 0x4b, 0xc5, 0xc8, 0x93, 0xd0, 0x37, 0x20, 0x7c, 0xb8, 0x86, 0x4a, 0x1d, 0x82, 0xe5, 0xc1, 0x50, 0xb7, 0x21, 0x24, 0x7e}}
	return a, nil
}

var _assetsTelemeterServicemonitorfederateYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xcd\x8a\xd7\x30\x10\xbf\xf7\x29\x86\xbd\x2c\x08\x6d\xd8\x83\x20\x01\x4f\x82\xa7\xd5\x8b\xe2\x45\xa4\x4c\xd3\xd9\x6d\x6c\x92\x09\x93\x69\x2f\xa2\xcf\x2e\x69\x5a\xd8\x3f\x8a\x07\x6f\xc9\x7c\xfd\x3e\x66\x30\xfb\x2f\x24\xc5\x73\xb2\x10\x39\x79\x65\xf1\xe9\x79\x70\x2c\xc4\x65\x70\x1c\xcd\xfe\xd0\xad\x3e\xcd\x16\x3e\x91\xec\xde\xd1\x87\x56\xd5\x45\x52\x9c\x51\xd1\x76\x00\x01\x27\x0a\xa5\xbe\x00\x28\xcd\x99\x7d\x52\x0b\x4f\x34\x93\xa0\xd2\x11\x5e\xdf\x94\x1e\x73\xb6\xa0\x14\x28\x92\x92\xf4\x85\x64\x27\xe9\x00\x12\x46\xfa\x33\xd1\xbf\xe8\xaf\x15\x25\xa3\x23\x0b\x3c\xd5\x34\x56\xa2\x5b\xec\x4a\x26\x57\x71\x2f\xd4\x83\x44\x0f\x13\xa1\x90\x7c\xe6\x95\xd2\x7b\x1f\xc8\x82\xd9\x51\x8c\x6c\xc9\x14\x72\x42\x5a\xcc\xba\x4d\x24\x89\x94\xca\xe0\xd9\x94\xa6\x0d\x9d\xe3\x2d\xa9\xd1\xda\x78\xd0\x5e\x38\xb1\x3c\x36\x79\xa0\xb2\x35\x31\x3e\x69\xe5\x10\x2c\x3c\xbc\x2e\x47\x24\xa3\x60\x3c\x1d\x00\x88\xa8\x6e\xf9\xfa\xed\xfa\xf6\x70\xff\x63\x1c\xab\x86\x71\x7c\xfb\xeb\x6e\x78\x75\xf7\xf3\xfe\xec\xd2\xc5\x82\xb9\x31\x2a\xb3\xa8\x6d\x08\x09\xc3\x11\x2a\x6e\xa1\xea\xd0\xa2\x9a\x1b\x9c\x86\xf2\x8e\xd3\x93\x7f\xbe\x20\x1c\xfe\x8f\xce\xf3\xdb\x3b\x1c\x9c\xe8\x39\xaa\xb9\xff\xf1\xaf\x3b\x19\x6e\xdc\x1f\xca\xee\x3a\x80\xef\x3c\x1d\x0e\xd9\x6b\xc9\x5d\x1d\x12\xc8\x29\x4b\xe3\x77\xf8\xf1\xf8\xe2\x48\xfe\x75\x0f\xbf\x03\x00\x00\xff\xff\x1c\xc1\x01\xa0\x93\x02\x00\x00")

func assetsTelemeterServicemonitorfederateYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTelemeterServicemonitorfederateYaml,
		"assets/telemeter-serviceMonitorFederate.yaml",
	)
}

func assetsTelemeterServicemonitorfederateYaml() (*asset, error) {
	bytes, err := assetsTelemeterServicemonitorfederateYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/telemeter-serviceMonitorFederate.yaml", size: 659, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3, 0x4, 0xcc, 0x1e, 0xc, 0x86, 0x65, 0xb9, 0x3, 0x3e, 0x79, 0x76, 0xf, 0xf8, 0x81, 0xe3, 0xe0, 0x1e, 0x2b, 0x47, 0x29, 0x9c, 0xff, 0x70, 0x3b, 0x8f, 0x9e, 0xac, 0x5, 0x3a, 0x4c, 0xcd}}
	return a, nil
}

var _assetsTelemeterStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x73\xdb\x36\x10\xbd\xeb\x57\xe0\xe0\x83\x7b\x20\x21\xc9\x6e\xc7\xc1\x0c\x0f\x19\x5b\x6d\x35\x8d\x1d\x8d\xe5\xf6\xaa\x59\x81\x2b\x13\x15\x3e\x18\x60\xc9\x46\xe9\xf4\xbf\x77\x28\x52\x12\x61\xcb\x8a\x9d\x44\xba\x70\x16\x6f\xf7\xbd\x5d\x2c\x16\x80\x52\xfd\x85\x3e\x28\x67\x05\x83\xb2\x0c\xbc\x1e\x2d\x91\x60\x3c\x58\x2b\x9b\x0b\x36\x27\x20\x5c\x55\x7a\x8e\x34\x30\x48\x90\x03\x81\x18\x30\x66\xc1\xa0\x60\x84\x1a\x0d\x12\xfa\x24\xa0\xaf\xd1\x77\x0b\xa1\x04\x89\x82\xb9\x65\x63\x05\x72\x5e\x55\x66\x10\x4a\x94\x8d\x67\xe9\xf2\x5b\xb0\xf0\x88\x06\x2d\xcd\x9c\x56\x72\x23\xd8\x0c\x3c\x68\x8d\x7a\xc0\x98\xc7\x52\x2b\x09\x41\xb0\x8b\x01\x63\x01\x35\x4a\x72\xbe\xf1\x64\xcc\x00\xc9\xe2\x03\x2c\x51\x87\xd6\xc0\xd8\xfa\x2a\x24\x50\x96\x47\xb5\x34\x1f\x4a\xe2\xdd\x4b\x5a\x09\x4d\xa9\x81\xb0\x0b\xde\x4b\xaf\xf9\xe9\x88\xe7\x34\x13\x63\xbb\xf4\x9a\x9f\x74\x96\x40\x59\xf4\x7b\xef\x84\x49\x67\x0c\xd8\xfc\x10\x2e\x61\xbc\x0a\x9e\x2f\x95\xe5\x47\x03\xb6\x98\x24\xf9\xdb\x29\x9b\x9d\x44\x34\x25\xcf\xce\xce\xef\xde\xdf\x4e\x7e\x8a\x16\xb4\x0a\x84\x36\x1b\xa6\xdb\xbf\xb8\xba\xbc\xbc\x38\xb2\x9e\x28\x4b\xe8\x2d\xe8\x03\x70\x78\x35\x3a\x06\x94\xba\x0a\x84\xbe\x8f\x1b\x47\xb8\x50\x80\xc7\x3c\x59\xe3\x26\xe3\x48\x92\x97\x6b\xc5\xbb\x4d\xe0\xa4\x43\xba\xc6\x4d\x84\x27\x1d\xde\x06\x96\x9e\x8e\x83\xa5\xa7\x08\xbc\xcb\xe9\x6d\x14\x91\xd7\xab\xb9\xa0\xa2\xc2\x79\xf5\x05\xb3\x82\xa8\x0c\x82\x73\x28\x55\xea\x4a\xb4\xa1\x50\x2b\x4a\xa5\x33\x8d\x85\x83\x94\xae\xb2\x14\x16\xe6\xd1\x10\xaf\x47\xbc\xab\xe7\xc2\xe3\xa3\x0a\xe4\x81\x94\xb3\x21\x0a\xed\x54\x2e\x13\x15\x42\x85\x3e\x3b\x3b\xff\x38\xbd\xb9\x5e\x4c\xe7\xf3\x3f\x27\xf7\xf1\x46\x4b\xad\xd0\x52\xa2\xf2\xec\xec\xfc\xfa\xc3\x74\x72\xf7\xb0\x98\xde\x1c\x85\x04\x94\x1e\xe9\x00\x9b\x4f\xae\xef\x27\x0f\x31\xd4\xa0\x91\x20\x0b\xcc\xb3\xfd\x57\x32\x4c\xf7\xdf\x69\x74\xae\xd3\x50\xcb\xb4\x4b\x24\xd5\x4e\x82\x16\xa3\xd1\x78\x14\xf7\x0f\xb9\x35\xda\x04\x3f\x97\xca\x63\x23\xc1\xd9\x3c\x64\x17\xbf\x0c\x87\x11\x6a\xe5\xfc\x3f\xe0\xf3\xa4\xf2\x7a\x5b\x49\xc1\x39\x15\x60\x5d\x48\x3c\x4a\x54\x35\x7e\x9d\xf9\xdd\xf8\xdd\x68\x5b\xeb\x7a\xc4\x3b\xa7\x3d\x05\xda\xba\x7f\xfa\xda\x09\xd6\x1c\x9a\xbd\x91\xb1\x1a\x74\x85\xbf\x7a\x67\x44\xcf\xc8\xd8\x4a\xa1\xce\xef\x71\x15\x5b\x3b\xfb\x0c\xa8\x10\xfb\xe9\x91\x36\x71\x9f\xd1\xf4\x76\xee\xeb\x6c\xed\x1e\xfd\x81\x9b\x23\x8c\x6b\xdc\x08\xd6\x74\xc5\xa2\xed\x8a\x27\xcb\x2f\x8e\xe5\x58\x4e\xb4\xf9\x3f\x40\x50\xdb\x5c\x8b\x16\xf7\x5d\x92\xa6\x37\x3f\x4e\x8e\xca\xdf\x26\x45\x19\x78\x44\xc1\x3e\x55\xb0\x49\x95\xe3\x50\x96\x49\xf0\x78\x98\xce\x42\x8e\x87\x3f\xcb\xcb\x43\x6b\x6b\x55\xa3\xc5\x10\x66\xde\x2d\xb1\xaf\xa4\xe9\xde\xdf\x90\x62\x71\xe5\xb6\x4f\x78\x81\xa0\xa9\xf8\x12\x2f\x39\x4f\x82\x45\xf3\x79\x9b\xa8\x2c\xb0\x51\xfc\xfb\xc3\xc3\x6c\x3e\x78\x65\x16\x4d\xac\xd0\x6f\xf4\xfd\x6d\x34\x3b\xc6\xd2\x46\xc3\xcf\xed\xe0\x3b\xe1\xd6\xbf\x13\x76\x6e\xbb\x79\x79\xd2\x6d\xfc\xcc\xad\x3b\xb4\x7b\xbb\x47\xc8\xd5\xb7\x16\x92\x37\xde\x9b\x6f\x2f\xa7\xc7\xe0\x2a\x2f\x31\xf4\x49\xb4\x32\x8a\x82\x60\xff\xfe\xd7\x33\x7a\xfc\x54\x61\x78\x62\xae\x9d\xae\x0c\xde\x6e\x07\x7b\xbf\xea\xa6\xb1\xb4\xa3\xe1\xe9\x25\xf2\xac\x1e\x4f\xf7\xb2\xb9\x7e\x22\x5e\xc8\x3f\x5a\xbd\x11\x6c\x05\x3a\xec\xdc\xbb\x60\xef\xdb\x4b\xe5\xc5\x37\xce\x41\x63\xef\x31\xd2\xd2\xb6\xe7\x28\x79\xb1\x93\xda\xf5\x7e\x59\x5a\xcb\x49\xae\xe4\x35\x39\xbd\x2d\x72\xf7\xac\x18\xfc\x1f\x00\x00\xff\xff\x03\x1a\x69\x7d\xab\x0a\x00\x00")

func assetsTelemeterStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsTelemeterStatefulsetYaml,
		"assets/telemeter-statefulSet.yaml",
	)
}

func assetsTelemeterStatefulsetYaml() (*asset, error) {
	bytes, err := assetsTelemeterStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/telemeter-statefulSet.yaml", size: 2731, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x28, 0x3a, 0x70, 0xc, 0x81, 0xb7, 0xd1, 0xc0, 0x65, 0x6b, 0x3a, 0xa6, 0x99, 0x7e, 0x87, 0x73, 0x55, 0x19, 0xf6, 0xe4, 0x1f, 0xdc, 0x6a, 0xd8, 0x1d, 0x20, 0x8d, 0x4d, 0xea, 0x2d, 0x76}}
	return a, nil
}

var _assetsThanosCompactorServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xce\x41\xae\x84\x30\x08\x06\xe0\x7d\x4f\xc1\x05\xf4\xe9\xdb\xbd\x9e\xe2\x25\x93\xcc\x1e\x2b\x19\x1b\x6d\x21\x80\x9e\x7f\xd2\xc6\xf5\x24\xb3\x03\x7e\xc2\x07\x4a\x7e\x92\x5a\xe6\x1a\xe1\x9a\xc3\x9e\xeb\x1a\xe1\x41\x7a\xe5\x44\xa1\x90\xe3\x8a\x8e\x31\x00\x1c\xb8\xd0\x61\xad\x02\x40\x91\x71\x3f\x17\xd2\x4a\x4e\x36\x66\xfe\xa9\x58\x28\x82\x6f\x58\xd9\x86\xc4\x45\x30\x39\x6b\x00\xf8\x18\x98\x60\xa2\x08\xbc\x18\xe9\x85\xce\x9a\xcf\x12\x4c\x28\x35\x46\x58\xbd\x7b\xc3\x7d\x64\x73\x97\xce\xb7\x24\xc2\x3c\xfd\x4d\xbf\xbd\x77\xd4\x17\xf9\x7f\x9f\xde\x4b\x46\x07\x35\xe8\xcb\x7f\xdf\x01\x00\x00\xff\xff\x45\x2c\xa7\xcd\x0e\x01\x00\x00")

func assetsThanosCompactorServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosCompactorServiceYaml,
		"assets/thanos-compactor-service.yaml",
	)
}

func assetsThanosCompactorServiceYaml() (*asset, error) {
	bytes, err := assetsThanosCompactorServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-compactor-service.yaml", size: 270, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0xb4, 0x9, 0x4e, 0x23, 0xad, 0x85, 0x18, 0x5e, 0xb5, 0xe7, 0x2a, 0xeb, 0x42, 0x55, 0x41, 0xb8, 0x3, 0x94, 0xe3, 0xd2, 0xaa, 0xd7, 0x3c, 0xbd, 0x81, 0x3, 0x90, 0x5b, 0xf9, 0x6f, 0xc9}}
	return a, nil
}

var _assetsThanosCompactorStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4d\x6f\xe3\x36\x10\xbd\xfb\x57\xf0\xb0\x87\x04\xa8\x24\xcb\xb1\x37\x59\x02\x3e\xa4\x9b\xac\xdb\x6d\x13\x1b\x71\xd0\x6b\x30\xa6\xc6\x12\x13\x7e\x2d\x49\x39\x35\xda\xfe\xf7\x82\x96\xad\x48\xfe\x88\xbd\x8b\xf5\xc5\xc2\xcc\x70\xe6\xf1\x0d\xf9\x86\x60\xf8\x5f\x68\x1d\xd7\x8a\x12\x30\xc6\x25\x8b\xb4\xf3\xc2\x55\x46\xc9\xd4\x83\xc7\x79\x29\xa6\xe8\x3b\x12\x3d\x64\xe0\x81\x76\x08\x11\x30\x43\xe1\xc2\x17\x09\x2b\xe2\x97\x72\x86\x56\xa1\x47\x17\x73\x9d\x28\x90\x48\x89\x2f\x40\x69\x17\x31\x2d\x0d\x30\xaf\x6d\x87\x90\x77\x1d\xce\x00\x43\x4a\xf4\xcc\xa1\x5d\x80\xd7\x96\x97\xb2\xe3\x0c\xb2\x50\xc6\xa2\x11\x9c\x81\xa3\x24\xed\x10\xe2\x50\x60\x58\x59\x01\x90\xe0\x59\xf1\x67\x03\xd1\x77\x61\x0a\xd5\x38\xc3\xfb\x43\x7e\x8f\xd2\x08\xf0\xb8\xae\xd5\x20\x21\xfc\x44\xab\xec\x77\x15\x3e\xb4\xc0\x5b\x60\x5c\xe5\x94\x3c\x03\xe6\x68\x23\xc8\x51\xf9\x55\xfc\x86\x8c\xf0\x63\x5a\x79\xe0\x0a\x6d\x5d\x3c\x22\x60\xf3\x06\x94\x88\xac\xab\x35\x2c\x51\xf4\x0a\xbc\x6d\xb0\xe8\x51\x79\xae\x55\x6c\xd1\x69\x51\x86\xcf\xc8\xc2\xeb\x30\xed\x67\xad\xc0\x4c\xbf\x2a\x07\xd2\x08\xae\xf2\x38\xe3\x0e\x66\x02\x8f\x67\x1a\xc8\x61\xea\x8e\x87\xa5\xc5\x76\x98\x9e\x3d\x3b\xaf\x2d\xc6\x4c\xab\x39\xcf\x87\x1f\xce\xc6\xbf\x7e\x9d\x3e\x8e\x1f\x6e\x9f\x3e\x8f\xef\xbf\xfc\x3e\x3a\x6f\xa3\x03\x0f\x51\xc6\xed\x30\x59\x80\x4d\x2a\xba\x93\x5d\xba\x57\xa1\x38\x2b\xf3\x18\x18\x43\xe3\x23\x09\x62\xae\xad\xc4\x2c\xe2\x2a\xc3\xbf\x1b\x81\xff\xd6\xdf\x84\x44\xd1\xba\x2b\x1b\x34\x0d\x1f\x21\x7e\x69\x90\x92\xaf\xd7\xb7\xa3\xdb\x87\x96\xa3\x0a\xa6\x2d\x5b\x7d\xe2\x9e\x8e\x9c\x8c\x75\x70\x60\x1c\xed\x53\x55\xc3\x82\x47\xc1\x25\xf7\x5c\xe5\x07\x02\x0d\x58\x90\x94\xf4\x6a\x37\xaa\x45\xf3\x50\x54\x55\xb7\xb8\x6c\xe4\x5a\x80\x28\xf1\x8b\xd5\xb2\x0d\xdb\x21\xb3\xe8\xff\xc0\xe5\x03\xce\xb7\x37\xf4\x82\xcb\xcd\x3e\xe2\x25\x48\xb1\xe5\x6e\xed\x53\xcf\x9e\x91\xf9\xd0\x59\xc8\xdf\x8e\x0f\x97\x90\x23\x25\xdf\x4a\x58\xae\xae\x40\xd5\xbe\xea\x8f\x2e\xba\xf1\xa7\xb8\x5b\xc7\x0a\xbe\x40\x85\xce\x4d\xac\x9e\x61\x13\xca\x1c\xb8\x28\x2d\x3e\x16\x16\x5d\xa1\x45\x46\x49\xbf\xe1\x2d\xbc\x37\x23\xf4\x6d\xec\x06\x7c\x41\x49\x12\x25\x05\x82\xf0\xc5\xb2\xed\xd4\xd6\x53\x92\x76\x3f\x75\x7b\x6d\x2a\x58\x81\x61\x47\xbf\x3d\x3e\x4e\x1a\x0e\x83\x96\xeb\x6c\x8a\x4c\xab\xcc\x51\x72\xf1\x86\xf8\x48\xa3\x43\x9d\xad\x7b\xbb\xbe\xdb\x93\xbd\x08\xaa\x74\x61\x3f\xb5\xd1\x22\x64\xfc\x44\x52\x7a\xdd\x93\x59\x09\x69\x7f\x26\x27\x83\x06\x60\xa7\x4b\xcb\xd0\x35\x2b\xaf\x4e\xb6\x6b\x63\x61\xa6\xa4\x64\xd0\xed\xca\x96\x55\xa2\xd4\x76\x49\x49\x6f\xc4\x1b\x76\x8b\xdf\x4a\x74\x7b\x33\xa4\x87\x32\xa4\x8d\x0c\x0b\x2d\x4a\x89\x77\xba\x54\xed\x7e\xc8\x60\x99\x54\xa4\xbc\xab\x2e\x87\x5a\xbd\x52\xa7\x16\x50\xc8\xc6\x4a\x2c\x29\x99\x83\x70\x78\x50\xc0\x83\x58\x06\xc6\xd1\xc6\xb9\x35\x2c\x2e\xb4\xf3\x51\x30\x0c\x33\xe5\x68\x92\x24\xeb\x11\xc1\xb4\xa8\x06\x62\x54\x20\x64\x02\x9d\x8b\x3f\x9c\xdd\x5f\xdf\xdd\x4e\x27\xd7\x9f\x6f\xcf\x63\xb7\x60\x34\xed\xf7\x06\xdd\xfd\xb9\x83\xb6\x0c\x43\x81\x96\xbb\xca\x1d\x7b\xc8\xdd\xd0\xe8\x2c\xae\x67\xf4\xb0\x99\xfb\x97\x8d\x6b\xf8\xe1\x6c\x32\xbe\x39\x7f\x5f\x76\xea\x75\xc7\x05\x67\xce\x51\x64\x7b\xc4\x66\x65\xaf\x9a\xb1\x19\xc6\x6f\xd0\x76\x0a\x4e\xc6\x37\x3f\xbf\xd4\xb6\x6c\x55\x4c\xad\x27\x44\xd2\x1c\xdb\x34\x8d\xd3\xfe\x8f\x69\xd7\xe0\xc4\x5b\xba\xef\x7a\xf6\x7b\x97\xe9\xf1\xeb\x59\x31\xb4\xf3\xca\x20\x27\x48\xd2\xc7\xab\x8b\x74\xe7\xd4\xaf\x33\xf9\xc2\xf2\xb9\x3f\xbc\x76\x70\x79\x79\xb5\xb3\xb6\x9a\x94\xee\x1d\x11\xdc\xda\x53\xb5\x4c\xa2\xb7\x9c\xb9\x1f\x94\x95\xb4\x77\x75\x40\x14\x7a\x57\x77\x27\x0a\xcb\x45\x6f\x7f\x8a\x8f\xfd\x3a\x83\x47\x2b\xb9\x82\xf0\xce\x19\x59\x60\x38\x69\x8b\x62\x5a\x0b\x72\xa5\x3f\x8d\x07\x1d\x4a\xe3\x97\x37\xdc\x52\xf2\xcf\x7f\x47\xa6\x49\x25\x31\xff\x07\x00\x00\xff\xff\xec\xfd\x79\x7c\xca\x0b\x00\x00")

func assetsThanosCompactorStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosCompactorStatefulsetYaml,
		"assets/thanos-compactor-statefulSet.yaml",
	)
}

func assetsThanosCompactorStatefulsetYaml() (*asset, error) {
	bytes, err := assetsThanosCompactorStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-compactor-statefulSet.yaml", size: 3018, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5c, 0xbe, 0xd, 0x6c, 0x10, 0x56, 0x8e, 0x3a, 0x7f, 0x4c, 0xbd, 0xca, 0x58, 0x22, 0x89, 0x5b, 0x93, 0xa, 0xaa, 0x15, 0x8d, 0xd2, 0xb0, 0x1, 0x25, 0x4c, 0xc0, 0x31, 0xd9, 0xda, 0x7d, 0x3f}}
	return a, nil
}

var _assetsThanosQuerierCacheConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\xaf\x9b\x30\x10\x84\xef\xfc\x8a\x95\xef\x49\x93\xaa\xaa\xf4\x7c\xed\xb9\xd7\x5e\xad\x25\xac\xc3\xea\x19\xdb\xf5\x2e\xe9\xa3\xea\x8f\xaf\xc0\x21\x50\xd4\x23\x3b\x1f\x3b\x63\x7b\x30\xf3\x0f\x2a\xc2\x29\x5a\x78\x5c\x9b\x0e\x15\x6d\x03\x90\x5a\xa1\xf2\x40\x4d\x85\xc7\xe1\x74\xc3\x5b\x4f\xa7\x5b\x8a\xfe\x3c\xe1\x10\x2c\xfc\x39\x35\x00\x00\x06\x47\xed\x1d\x45\x6c\x03\x75\xc6\x82\xc7\x20\x54\x15\x5f\x52\x54\x8a\x9d\xb1\xcb\xf7\xcc\x06\xbe\x47\xf7\x73\xa4\xc2\x24\xee\x17\x6b\xef\x44\x29\x1b\x0b\x5a\x46\x5a\xa9\xc5\xca\x15\x92\x31\xa8\x1c\xb5\x34\xe4\x42\x22\xb3\x9c\x53\x14\x3a\x02\xcf\xdf\xdc\xb2\xe4\xe5\xbc\x6e\xdd\x0d\x00\x4c\x4d\xed\x3c\xfb\xf4\x54\xf7\xab\xea\x19\x36\x6d\x37\x06\x30\xc2\xbf\x67\xfe\x7a\xf9\xfc\xe5\x5f\xe1\x81\x81\x3b\xd6\xc9\x58\x30\x5f\x7b\xb3\x05\x18\xf0\xc3\xf9\x42\xd2\x47\x92\x39\xb5\xb9\x0e\xab\x6a\x24\x07\xd6\xd7\xc5\xb4\x93\xeb\x70\xda\xa7\x31\xbd\x6a\x76\xb9\x90\xe7\x0f\x63\x21\x8e\x21\xd4\xf9\xfc\x44\x54\xb6\x1b\x5e\xb8\xc0\xa2\x14\x5d\x4e\x45\x8d\x85\xb7\xcb\xdb\xa5\xc2\x8a\xe5\x4e\xf3\xc8\xcc\x4e\xd3\xe9\xf5\x40\xcd\x3b\xc7\xce\xc2\xb7\x14\x3d\xdf\xbf\x63\x6e\x06\x52\x5c\x7b\x10\xb0\xa5\x20\xd5\x01\x73\x3e\xbf\x8f\x2d\x95\x48\x4a\x72\xe6\xf4\x29\xe2\x40\xf6\xd0\x95\x7a\x8e\x52\x3b\xd3\x00\xfc\x8f\xd9\xfa\xf4\x04\x24\xe3\xed\x48\x35\x7f\x03\x00\x00\xff\xff\xb4\xea\x44\xb3\x9b\x02\x00\x00")

func assetsThanosQuerierCacheConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosQuerierCacheConfigmapYaml,
		"assets/thanos-querier-cache-configmap.yaml",
	)
}

func assetsThanosQuerierCacheConfigmapYaml() (*asset, error) {
	bytes, err := assetsThanosQuerierCacheConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-querier-cache-configmap.yaml", size: 667, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4d, 0x31, 0x95, 0x5a, 0xa3, 0x77, 0x4c, 0xbe, 0xe5, 0x6f, 0xa7, 0x7, 0xfc, 0xd, 0x49, 0x58, 0x9b, 0xd2, 0x38, 0x65, 0x8a, 0x5d, 0x33, 0xb0, 0x9b, 0xd5, 0x1, 0x1a, 0x67, 0xd7, 0x5e, 0x4e}}
	return a, nil
}

var _assetsThanosQuerierCacheDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x52\xdd\x8e\xd3\x3c\x10\xbd\xcf\x53\xcc\x0b\xc4\x69\xbf\xea\x43\xd4\xd2\x5e\xac\x60\xb9\xa2\x50\x81\xc4\xfd\xd4\x99\xb4\x66\xfd\xb7\xe3\x49\xa0\x6f\x8f\x4c\xda\x90\x50\x21\x55\xeb\xab\xe4\x78\xe6\x9c\xe3\x39\x83\xc9\x7e\x23\xce\x36\x06\x0d\x98\x52\x6e\x86\x75\xf5\x6c\x43\xab\xe1\x3d\x25\x17\xcf\x9e\x82\x54\x9e\x04\x5b\x14\xd4\x15\x80\xc3\x03\xb9\x5c\xbe\xa0\x34\xa8\xe7\xfe\x40\x1c\x48\x28\x2b\x1b\x9b\x80\x9e\x34\xc4\x43\x26\x1e\x50\x22\xdb\xde\xd7\x2f\x3d\xb1\x25\xae\x0d\x9a\x13\x55\x00\xf7\xd6\xe4\x84\xe6\xef\xc2\x2a\x27\x32\x45\x9c\x29\x39\x6b\x30\x6b\xd8\x54\x00\x99\x1c\x19\x89\x3c\xda\xf2\x28\xe6\xf4\x71\xe6\xf3\xb5\x4e\x85\x7c\x72\x28\x74\xa1\x9d\x4d\xa1\x1c\xb7\x50\x78\xad\x06\xc0\xf5\x49\xe5\x98\x18\x04\x6d\x20\x9e\x78\x6b\x40\x3e\xce\x54\x6a\xa8\x4d\x0c\x9d\x3d\xaa\xce\x3a\x7a\x68\x48\x4c\xf3\x9b\xeb\x02\x37\x4b\xb9\x3f\x57\xea\x8c\xde\xcd\x69\x3a\x8e\x41\x28\xb4\xaa\x8d\x3f\x42\x16\x26\xf4\x75\xcf\xee\xe1\x24\x92\x74\xd3\xc8\x09\x43\xcc\x57\xbf\x6a\x41\xab\xf2\x60\x94\x71\x7d\x16\x62\xe5\xa2\x41\xa7\xb7\xab\xed\x6a\x62\xa7\x30\xcc\x1d\x8f\x73\xf8\xf4\xb8\x7b\xfa\xba\x7f\x7c\xf7\x34\xdd\x00\x0c\xe8\x7a\xfa\xc0\xd1\xeb\x19\x08\xd0\x59\x72\xed\x17\xea\x96\xe8\x05\xdf\xa3\x9c\xf4\x94\x86\x9a\x56\x65\xaa\xb5\x1e\x8f\xa4\xe1\xa5\xc7\x73\x49\xc1\x44\x16\xfa\x99\x38\x7e\x27\x23\x97\x3f\xed\xb1\x78\xaf\xdf\xfe\xbf\xd9\xe0\x7f\xeb\x37\x53\xef\x7d\x91\x95\x93\x22\xcb\x22\x97\x29\xbb\x7d\x64\xd1\xb0\x5d\xad\xd6\x33\xfb\x23\x71\x99\xed\x04\x0e\xd1\xf5\x9e\x76\xb1\x0f\x4b\x22\x5f\x90\xf1\x95\xb7\xf1\xde\x50\x2e\xdc\x5d\xaa\x66\x45\x4c\xd8\x7e\x0e\xee\xac\xa1\x43\x97\xaf\xf6\x47\xe9\xd9\x92\x8d\x7d\x3b\x4c\xfa\x46\xe0\x5f\x0b\x55\xdd\xe1\xe3\x57\x00\x00\x00\xff\xff\xdc\x3c\xea\xca\x5f\x04\x00\x00")

func assetsThanosQuerierCacheDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosQuerierCacheDeploymentYaml,
		"assets/thanos-querier-cache-deployment.yaml",
	)
}

func assetsThanosQuerierCacheDeploymentYaml() (*asset, error) {
	bytes, err := assetsThanosQuerierCacheDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-querier-cache-deployment.yaml", size: 1119, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9c, 0xe1, 0x3f, 0xc7, 0x5a, 0xeb, 0x11, 0xe5, 0xe0, 0xf2, 0xed, 0x21, 0x5e, 0x82, 0x9e, 0xab, 0xa2, 0x96, 0x3f, 0x5f, 0xe2, 0x3c, 0xda, 0x68, 0xd0, 0xb6, 0x5d, 0x23, 0x60, 0xe2, 0xd6, 0xd2}}
	return a, nil
}

var _assetsThanosQuerierCacheServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8e\x41\x6e\x83\x40\x0c\x45\xf7\x73\x0a\x5f\x00\x4a\x97\xcc\x29\x2a\x55\xea\xde\x0c\x5f\x8d\x05\xcc\x4c\x6c\xc3\xf9\x23\x48\x22\xa1\x28\xab\xec\x6c\xff\x67\x3f\x73\x95\x3f\xa8\x49\xc9\x91\xb6\xef\x30\x49\x1e\x23\xfd\x42\x37\x49\x08\x0b\x9c\x47\x76\x8e\x81\x68\xe6\x01\xb3\xed\x15\x11\xd7\xda\x4e\xeb\x00\xcd\x70\x58\x2b\xe5\x2b\xf3\x82\x48\x65\x30\xe8\xc6\x5e\x54\xd6\xa5\xb9\xae\x50\x81\x36\x89\xd3\x05\x81\xe8\x1d\x73\xce\xac\x72\x7a\x05\x82\x55\xa4\x5d\x5a\x8b\xfa\x61\x6f\x1e\x77\x9e\x9b\xf7\x28\x52\xdf\xf5\xdd\xd1\x3a\xeb\x3f\xfc\xe7\x3c\x34\xcc\x48\x5e\xf4\xf3\xef\x6f\x01\x00\x00\xff\xff\x80\x64\xf8\x2c\x27\x01\x00\x00")

func assetsThanosQuerierCacheServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosQuerierCacheServiceYaml,
		"assets/thanos-querier-cache-service.yaml",
	)
}

func assetsThanosQuerierCacheServiceYaml() (*asset, error) {
	bytes, err := assetsThanosQuerierCacheServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-querier-cache-service.yaml", size: 295, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0x92, 0x16, 0x9a, 0xaf, 0xc6, 0x89, 0x9c, 0x89, 0xd0, 0x3, 0x41, 0x28, 0x50, 0xf8, 0x7b, 0x4c, 0x14, 0xfd, 0xc3, 0x9d, 0x18, 0xe3, 0xc7, 0x14, 0xd, 0xf4, 0x55, 0x6f, 0xf0, 0xda, 0xdf}}
	return a, nil
}

var _assetsThanosQuerierDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x4b\x6f\xe3\x36\x10\xbe\xfb\x57\x10\x8b\x3d\xec\xa2\x95\x2c\x39\x76\x1e\x04\x7c\x30\x1a\x37\xdd\xb6\xe9\x1a\x9b\xa0\xd7\x80\xa1\xc6\x12\x1b\x8a\x64\x86\x94\xbb\x02\xfa\xe3\x0b\x4a\x8a\xa2\x87\x9d\xb5\x17\xab\x1c\x62\x71\x66\xbe\x99\xf9\xe6\x41\x31\x23\xfe\x06\xb4\x42\x2b\x4a\x98\x31\x76\xba\x8b\x27\x4f\x42\x25\x94\x5c\x83\x91\xba\xcc\x41\xb9\x49\x0e\x8e\x25\xcc\x31\x3a\x21\x44\xb2\x47\x90\xd6\xff\x22\xde\x20\x7c\x2a\x1e\x01\x15\x38\xb0\xa1\xd0\x53\xc5\x72\xa0\xc4\x65\x4c\x69\x1b\x3c\x17\x80\x02\x70\x42\xc8\x1b\xc7\xd6\x30\x0e\x94\xe8\x47\x0b\xb8\x63\x4e\xa3\x28\xf2\x89\x35\xc0\xbd\x0b\x04\x23\x05\x67\x96\x92\xb3\x09\x21\x16\x24\x70\xa7\xb1\x76\x9e\x33\xc7\xb3\x3f\x3b\xd1\x9c\x10\x8f\x83\xdc\x48\xe6\xa0\x41\xea\xa4\xe7\x1f\xd9\x03\x3d\x01\xf6\x90\xba\x43\xc6\x85\x4a\x29\xf9\x87\x41\x0a\x18\xb0\xd4\xb3\xea\x75\x5f\x12\xad\xec\xb6\x5b\xa1\x84\x2b\x5f\x1d\x1b\x9d\xac\x94\x13\xab\x91\x80\x10\x83\xb0\x05\x44\x48\xae\x0b\x14\x2a\xbd\xe3\x19\x24\x85\x14\x2a\xfd\x94\x2a\xdd\x1e\xaf\xbf\x02\x2f\x9c\x2f\x6e\xc7\x34\xa8\x70\x1b\xcc\x7b\xc0\xbc\x2b\x6c\xf3\xbf\xeb\x91\xdd\x7d\x2a\xe2\xd7\x5f\x0d\x82\xf5\x7d\x63\xc7\x1a\x01\x79\x82\x92\x1e\xe0\x6d\xa4\x4d\x88\x36\x80\xbe\xf4\x94\x7c\x52\x7b\xc4\x3b\x26\x0b\xd8\xe3\xc6\x3b\x3a\x50\x83\xfa\x69\xfb\x6b\x64\x1c\x0c\x1a\xae\x2f\x75\xda\x68\xa9\xd3\xf2\x0f\x9f\x45\x3f\x83\x4c\x5b\x37\xca\xe2\x5f\x10\x69\xe6\x28\x89\xa3\xa8\x39\xe7\x5a\x39\x26\x14\x60\xeb\x39\x20\x0c\xd3\x4e\x1c\x01\xf1\x31\x97\x9d\xf7\xa0\xca\xa2\x0c\x9b\xa6\x0f\xaa\x32\x2c\x9b\xb7\x6f\xeb\x15\x12\xf0\xe1\x58\x6d\x83\x3a\x07\x97\x41\x61\xf7\x9a\xa4\x68\x78\xc0\x92\xc4\x97\x78\x19\x85\xd5\x1f\x8d\xa3\xab\x28\xee\xa9\x65\xce\x99\x91\xda\x55\x74\x15\xf5\xb4\xac\xd3\x08\xcb\x44\x59\x8b\xbb\x9f\x1e\x3c\x74\xf8\xe0\xb8\x09\x9b\xd2\x55\xe2\xb0\x57\x8e\xd0\xee\x78\xc8\x65\x61\x1d\x60\x28\x35\x67\xf2\x14\xc0\x8a\x89\x13\x00\xff\xeb\xce\x46\xd0\xcc\x6a\xc8\xb5\xda\x8a\x74\xd9\xab\xb3\x2b\x0d\x50\xf2\xfb\x6a\x7d\xb3\xfe\xd2\x13\xd4\xca\xc3\x26\xf3\x01\x08\x0e\x0f\x6f\x6e\x8b\x46\x95\xe5\xc6\xd7\xaf\xf6\x80\xcc\x81\x14\xb9\x70\x42\xa5\x07\x14\x0d\x43\x96\x53\x32\x3b\x89\x18\xe0\x20\x76\x10\x24\xb0\x65\x85\x74\x47\x53\x24\x72\x96\x02\x25\xcf\x05\x2b\xab\x6d\x56\xa1\x35\xff\xe8\x2e\x0a\xaf\xc2\xd7\x82\x4b\xb1\x03\x05\xd6\x6e\x50\x3f\x42\x97\x90\x2d\x13\xb2\x40\xb8\xcf\x10\x6c\xa6\x65\x42\xc9\xbc\x23\xf5\x9d\x74\x03\xae\xcf\xa0\x61\x2e\xa3\x64\x1a\x4c\x33\x60\xd2\x65\x65\x5f\xa8\xd1\x51\xd2\x6b\xb6\x8a\x1f\x9e\x81\x67\xfb\xb7\xfb\xfb\x4d\x77\x5d\x02\x0a\x9d\xdc\x01\xd7\x2a\xf1\xb7\xc9\xab\xd1\x9b\xc5\xf1\x4e\x7a\x33\xdb\xce\xf5\xa6\x72\xdf\x1f\x89\x17\x30\x4f\xfc\x61\x9b\x41\xc8\xb5\x89\xcf\xbf\x3d\x44\x60\x89\x38\x92\xc4\x59\x74\x34\x8b\x1e\xf6\x07\x72\xb8\xe8\xc4\x6b\x75\x81\x83\x2d\x5b\xf5\xef\x60\xef\x72\x53\x50\xf2\x2e\x7e\xd7\x3b\xcc\x21\xd7\x58\x52\x12\xdf\x88\xce\x39\xc2\x73\x01\x76\x2f\x40\x1c\x45\xf9\x5e\x84\xd9\xe2\xfc\x56\x1c\x5c\xb7\x41\x80\xe0\x13\x06\x0c\xab\xc9\xf0\x9b\x3c\xf0\x07\x7e\x60\xe8\x74\x3a\x6d\x2e\x67\xae\x65\x7d\xf3\x05\x19\xb0\x44\x82\xb5\xe1\xfb\x0f\x7f\xad\x6e\xd7\x77\x9b\xd5\x2f\xeb\x8f\x7e\x4e\x68\x3c\x9f\x2d\xa2\xfd\xd8\x7e\x82\x97\x83\x0e\x08\x82\x1a\x3b\x74\x2c\xb5\x4b\xa3\x93\xb0\xbd\x99\x96\x5d\xec\x9f\x5f\x44\xcb\xf7\x1f\x36\x9f\xaf\x3f\xb6\x10\xa0\x76\xdd\x54\xea\x9e\x69\xed\x3a\x64\x54\x57\xe5\xaf\xa8\x07\x77\xfa\x56\x80\x4c\xbe\xc0\x76\xb8\xa1\xaa\xf3\x4d\xd5\x20\x2f\x1f\x41\xaf\xa1\x8d\x1c\x6e\x3e\x5f\xff\x78\x57\xc3\x2d\x53\x33\xd5\x6c\xe1\x69\xf7\x83\x89\xc6\x61\x3c\xff\xbe\x55\xb3\x38\x72\x48\xf6\x4c\x47\x3c\x9f\x5d\xc4\xdf\x1e\x8f\x9a\xa1\xd1\xf7\x1d\x39\x62\x89\x9c\x5f\x9e\x8d\x77\x48\x83\xe4\x32\x14\x5b\x77\xd8\x76\x71\x71\x71\x39\xb2\xad\x6f\x23\xfb\xc6\xda\x1a\xe4\x54\x9b\xe5\xe0\x50\x70\xfb\x9d\x63\x1d\xcf\x2e\xf7\x4f\x65\x3c\xbb\xbc\x3d\x72\xb2\xcf\x66\xfb\x21\xce\xe7\x2d\x82\x03\xcc\x85\x62\xfe\x9b\xf6\x06\x19\x87\x4d\x7f\x29\xc5\xb3\x68\xf2\x7f\x00\x00\x00\xff\xff\xa9\x95\xbd\xe7\xd3\x0c\x00\x00")

func assetsThanosQuerierDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosQuerierDeploymentYaml,
		"assets/thanos-querier-deployment.yaml",
	)
}

func assetsThanosQuerierDeploymentYaml() (*asset, error) {
	bytes, err := assetsThanosQuerierDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-querier-deployment.yaml", size: 3283, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x73, 0x66, 0xea, 0x24, 0xcf, 0x2e, 0xa8, 0x73, 0xf1, 0xd, 0xf2, 0xfc, 0xa3, 0xf8, 0xd, 0x33, 0x97, 0xe8, 0xbb, 0x66, 0x64, 0x3a, 0x5b, 0x65, 0xff, 0x6c, 0xb6, 0x99, 0xb9, 0xb6, 0x90, 0xca}}
	return a, nil
}

var _assetsThanosQuerierServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x6a\xc4\x30\x0c\x45\xf7\x3e\x85\x2e\x30\x53\x67\x19\x9f\xa2\x50\xe8\x5e\xf1\x7c\x26\x26\x89\xad\x4a\x4a\xce\x5f\x62\x52\x28\x14\x0a\xb3\xb3\xbf\xfe\xd3\x43\x2c\xe5\x13\x6a\xa5\xd5\x44\xc7\x10\x96\x52\x1f\x89\x3e\xa0\x47\xc9\x08\x1b\x9c\x1f\xec\x9c\x02\xd1\xca\x13\x56\x3b\x5f\x44\x2c\x72\x5f\xf6\x09\x5a\xe1\xb0\x7b\x69\x6f\x95\x37\x24\xf2\x99\x6b\xb3\xdb\xd7\x0e\x2d\xd0\x40\xf4\x4f\x6c\xc2\x19\x89\xda\x64\xd0\x83\xbd\x69\xd9\xb7\x60\x82\x7c\x2a\xa4\xa9\x77\xd7\xed\x5a\xf1\x54\xc9\x5d\x7d\x4e\x12\x0d\x71\x8c\x43\xff\x3b\xeb\x13\xfe\xde\xd3\xab\xf4\xc3\xcc\xee\xf2\x8b\x19\xe3\x18\xff\x20\x57\xc7\xb0\x22\x7b\xd3\x97\xce\xfb\x0e\x00\x00\xff\xff\x2e\xc5\xc4\x82\x3b\x01\x00\x00")

func assetsThanosQuerierServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosQuerierServiceYaml,
		"assets/thanos-querier-service.yaml",
	)
}

func assetsThanosQuerierServiceYaml() (*asset, error) {
	bytes, err := assetsThanosQuerierServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-querier-service.yaml", size: 315, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x89, 0x4c, 0xfd, 0x9b, 0x6b, 0x4c, 0x43, 0x9c, 0x2c, 0xa4, 0xeb, 0x3e, 0x76, 0xb3, 0x15, 0x1a, 0x26, 0xe0, 0xd1, 0xb3, 0x40, 0xfd, 0xad, 0xd, 0x8, 0x64, 0xfc, 0x82, 0x8f, 0x34, 0x65, 0x36}}
	return a, nil
}

var _assetsThanosReceiveControllerConfigmapYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8e\xbd\x52\xc4\x30\x0c\x84\x7b\x3f\xc5\x8e\x6b\x12\x86\xd6\x2d\x35\x2d\xcd\x0d\x85\x92\xe8\x2e\xe6\x1c\xd9\x23\x29\x69\x80\x77\x67\xb8\x4b\x60\x86\x46\x3f\xfb\x7d\xc5\x52\xcb\xaf\xac\x96\xab\x24\x6c\x4f\x61\x22\xa7\x14\x80\x99\x6c\xd6\x2c\x17\xeb\xdf\xed\x07\x7d\x76\x01\x00\x4e\xb7\x09\x7c\xec\x1b\x88\x87\x19\x13\xe2\xc4\x67\x5a\x8b\xc7\x87\x3f\xec\x2c\x24\x6e\x31\xe1\x14\x7e\xd3\xb7\xfd\xfa\x0a\xf7\xef\x9a\x65\x4a\x78\xae\x72\xce\x97\x17\x6a\x61\x61\xa7\xa3\x49\xa1\x81\x8b\xa5\x9b\x49\xad\xf5\xd7\x75\x60\x15\x76\xb6\x3e\xd7\x47\xa1\x85\x13\x7c\x26\xa9\xd6\x29\x8f\x9c\x37\xee\xc6\x2a\xae\xb5\x14\xd6\x00\xdc\x8d\x3a\x18\xeb\x46\x5e\x35\xaf\x4b\xb7\x97\xda\xa9\x35\x1a\xff\x2b\xe1\x3b\x00\x00\xff\xff\x5d\x5a\x93\xa2\x18\x01\x00\x00")

func assetsThanosReceiveControllerConfigmapYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosReceiveControllerConfigmapYaml,
		"assets/thanos-receive-controller-configmap.yaml",
	)
}

func assetsThanosReceiveControllerConfigmapYaml() (*asset, error) {
	bytes, err := assetsThanosReceiveControllerConfigmapYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-receive-controller-configmap.yaml", size: 280, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0x92, 0xb9, 0x10, 0x82, 0xa4, 0x89, 0xf1, 0x88, 0x5, 0x5a, 0xc0, 0xa3, 0x18, 0x87, 0x98, 0xfc, 0x86, 0xc3, 0xab, 0x64, 0xe5, 0x94, 0xdd, 0xaf, 0xc4, 0x48, 0x78, 0xa4, 0xbc, 0x3f, 0x25}}
	return a, nil
}

var _assetsThanosReceiveControllerDeploymentYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4f\x6f\x13\x31\x10\xc5\xef\xfb\x29\xe6\xc0\x01\x0e\x4e\x76\xa3\x08\x82\xa5\x1e\x22\x28\x27\x8a\x22\x90\xb8\x4f\x9c\xc9\xae\xa9\xff\x75\x3c\xbb\x52\xbe\x3d\xb2\x52\xcc\xae\xd4\x56\x55\x7d\xb2\xc6\x6f\x7e\x9e\x79\x0f\x93\xfd\x4d\x9c\x6d\x0c\x1a\x30\xa5\xbc\x9e\xba\xe6\xde\x86\x93\x86\xaf\x94\x5c\xbc\x78\x0a\xd2\x78\x12\x3c\xa1\xa0\x6e\x00\x1c\x1e\xc9\xe5\x72\x83\xd2\xb0\xba\x1f\x8f\xc4\x81\x84\xf2\xca\xc6\x75\x40\x4f\x1a\x64\xc0\x10\xb3\x62\x32\x64\x27\x52\x26\x06\xe1\xe8\x1c\x71\x03\xf0\x3a\x45\x4e\x68\x48\x43\x3c\x66\xe2\x09\x25\xb2\x1d\x7d\x93\x13\x99\xf2\x31\x53\x72\xd6\x60\xd6\xd0\x35\x00\x99\x1c\x19\x89\x7c\x1d\xc9\xa3\x98\xe1\xfb\x6c\xc6\xb7\x4d\x29\xe4\x93\x43\xa1\x47\xe8\x6c\xff\x72\xdc\x82\xff\xb6\x1f\x00\xfe\xad\x53\x4e\x79\x42\x1b\x88\x2b\x55\x01\x72\x3f\xfb\x43\x81\x2a\x80\xb3\xed\x3d\x26\x55\xf8\x37\x0b\x77\x94\x50\xc0\x20\xf9\x99\x86\x9e\x02\x31\x0a\x9d\x5e\x68\xfd\x2f\x5a\x40\xce\xd6\xd1\xb5\x6b\xc0\x3c\xb0\x0d\x7d\x5e\xfd\xc9\x31\x2c\x44\x35\xb4\x9b\x77\xef\x7f\xec\xef\x6e\x7f\x1d\xf6\x5f\x6e\x3f\x54\x09\x85\x69\xbe\xca\xd5\x9e\xaa\xab\x2f\x00\x13\xba\x91\xbe\x71\xf4\x7a\x56\x04\x38\x5b\x72\xa7\x9f\x74\x5e\x56\x1f\xeb\x07\x94\x41\xd7\x90\x56\x75\x94\xaa\xb5\x1e\x7b\xd2\xf0\x30\xe2\xa5\x84\xb3\x58\x7e\xfd\x6c\x48\xda\x63\x16\x62\xb5\x69\xbb\xcf\xaa\xeb\x54\xb7\x51\xdb\x4f\xa6\xdd\x19\x53\xc1\xaf\x89\xb9\x9c\x14\x59\x16\x59\xd6\xbc\x0f\x91\x45\xc3\xae\xdd\xb5\xb3\xcd\xae\xd8\x41\x24\xd5\x22\x53\x8e\x23\x1b\xca\x73\x07\x9c\xf5\x56\xf2\xd2\x13\x93\x46\x0d\x1f\xb7\x7e\x51\xf4\xe4\x23\x5f\x34\x74\x9b\xdd\x9d\x9d\xbd\x30\x3d\x8c\x94\x9f\x44\x74\xed\xd3\x88\xcd\xb6\x12\x8a\x8b\xd6\xd0\xde\x98\x38\x06\x79\xc9\x87\xbf\x01\x00\x00\xff\xff\x2d\xcf\xb1\x0f\x66\x04\x00\x00")

func assetsThanosReceiveControllerDeploymentYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosReceiveControllerDeploymentYaml,
		"assets/thanos-receive-controller-deployment.yaml",
	)
}

func assetsThanosReceiveControllerDeploymentYaml() (*asset, error) {
	bytes, err := assetsThanosReceiveControllerDeploymentYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-receive-controller-deployment.yaml", size: 1126, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x90, 0xcb, 0xaf, 0xc7, 0x68, 0xf7, 0x41, 0x59, 0x8d, 0xb3, 0xb4, 0x85, 0xd6, 0xa, 0xb8, 0xf8, 0x76, 0x38, 0xa1, 0x2a, 0x2e, 0x78, 0x49, 0x20, 0xf9, 0xc, 0x4b, 0x5a, 0x28, 0xdd, 0x37, 0x18}}
	return a, nil
}

var _assetsThanosReceiveControllerRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8d\xb1\x6e\xeb\x30\x0c\x45\x77\x7d\x05\x91\xdd\x79\x78\x5b\xa1\x1f\xe8\xde\xa1\x3b\x2d\xdf\xc4\x44\x64\x51\x20\x29\x17\xe8\xd7\x17\x71\x3d\xb5\x4b\xb7\x83\x83\x8b\x7b\xb8\xcb\x3b\xcc\x45\x5b\x26\x9b\xb9\x5c\x79\xc4\xaa\x26\x9f\x1c\xa2\xed\xfa\x78\xf1\xab\xe8\xbf\xfd\x7f\x7a\x48\x5b\x32\xbd\x69\x45\xda\x10\xbc\x70\x70\x4e\x44\x8d\x37\x64\x8a\x95\x9b\xfa\x64\x28\x90\x1d\x53\xd1\x16\xa6\xb5\xc2\xce\x85\x77\x2e\xc8\xa4\xb3\xc3\x76\x0e\x35\x19\x5b\xb2\x51\xe1\x39\x4d\xc4\x5d\x5e\x4d\x47\xf7\xe7\xe1\x44\x97\x4b\x22\x32\xb8\x0e\x2b\x38\x5d\xd1\x76\x93\xfb\xc6\xdd\x13\xd1\x0e\x9b\x4f\x5f\xc5\xe3\x80\x0f\x8e\xb2\x1e\x74\xc7\xb7\x29\x06\x0e\x1c\x38\xfa\xf2\xc4\x5f\x25\xee\xc7\xdf\x8f\x96\x07\x07\x6e\xa3\x3a\xe2\x6f\xb5\xaf\x00\x00\x00\xff\xff\x9f\x53\x41\x74\x44\x01\x00\x00")

func assetsThanosReceiveControllerRoleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosReceiveControllerRoleYaml,
		"assets/thanos-receive-controller-role.yaml",
	)
}

func assetsThanosReceiveControllerRoleYaml() (*asset, error) {
	bytes, err := assetsThanosReceiveControllerRoleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-receive-controller-role.yaml", size: 324, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0xb9, 0xa1, 0x1a, 0x20, 0x2e, 0x56, 0x65, 0x7c, 0x11, 0xa8, 0xdd, 0x60, 0xa4, 0xc9, 0x2d, 0x66, 0xea, 0x2b, 0xfa, 0x86, 0xe3, 0x97, 0x19, 0x35, 0x82, 0x7d, 0x96, 0x82, 0x20, 0xed, 0x8f}}
	return a, nil
}

var _assetsThanosReceiveControllerRolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xce\x3d\x4e\xc5\x30\x0c\x07\xf0\x3d\xa7\xf0\x05\x5a\xc4\x86\xb2\xc1\xc2\x5e\x24\x76\xd7\x35\xd4\x34\xb5\x23\xc7\xc9\xc0\xe9\x11\x52\x25\x36\xf4\xa4\xb7\xff\x3f\x7e\x58\xe5\x9d\xbd\x89\x69\x06\x5f\x91\x66\xec\xb1\x9b\xcb\x37\x86\x98\xce\xc7\x53\x9b\xc5\x1e\xc6\x63\x3a\x44\xb7\x0c\x8b\x15\x7e\x11\xdd\x44\x3f\xd3\xc9\x81\x1b\x06\xe6\x04\xa0\x78\x72\x86\xd8\x51\xad\x4d\xce\xc4\x32\x78\x22\xd3\x70\x2b\x85\xfd\x4a\xb4\x8a\xc4\x19\x6c\x6d\xec\x03\xc3\x5c\xfa\x99\xdc\x0a\x2f\xfc\xf1\xbb\x82\x55\x5e\xdd\x7a\xfd\x87\x92\x00\xfe\x24\x37\x1c\xb7\xbe\x7e\x31\x45\xcb\x69\xba\x8a\x6f\xec\x43\x88\x9f\x89\xac\x6b\xdc\x67\xff\x09\x00\x00\xff\xff\xdc\x71\x13\x18\x3e\x01\x00\x00")

func assetsThanosReceiveControllerRolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosReceiveControllerRolebindingYaml,
		"assets/thanos-receive-controller-roleBinding.yaml",
	)
}

func assetsThanosReceiveControllerRolebindingYaml() (*asset, error) {
	bytes, err := assetsThanosReceiveControllerRolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-receive-controller-roleBinding.yaml", size: 318, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4, 0x53, 0xaf, 0xdb, 0x56, 0xc8, 0xde, 0x4b, 0x9f, 0x76, 0x33, 0x5d, 0x57, 0x37, 0x1f, 0x4e, 0x4, 0x2e, 0xad, 0x1f, 0xa3, 0xf5, 0x38, 0xa2, 0x84, 0xd1, 0x68, 0x10, 0x62, 0x3e, 0xf8, 0x2d}}
	return a, nil
}

var _assetsThanosReceiveControllerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xbd\x8e\x84\x30\x0c\x84\xfb\x3c\x85\x5f\x00\x8e\xeb\x50\x9e\xe2\xa4\x93\xae\x37\x61\x74\x44\x84\x38\xb2\x4d\x9e\x7f\x05\xda\x62\xcb\xd5\x76\xfe\x19\xcd\x7c\xc3\x2d\xff\x41\x2d\x4b\x8d\xd4\xbf\xc3\x9e\xeb\x1a\xe9\x17\xda\x73\x42\x38\xe0\xbc\xb2\x73\x0c\x44\x85\x17\x14\xbb\x26\x22\x6e\x6d\xdc\xcf\x05\x5a\xe1\xb0\x31\xcb\x57\xe5\x03\x91\x7c\xe3\x2a\x36\x28\x12\x72\xc7\x90\xa4\xba\x4a\x29\xd0\x40\xf4\x9e\xc2\x1a\x27\x44\x92\xc5\xa0\x9d\x5d\x34\x9f\x47\xb0\x86\x74\x05\x37\x51\xbf\x09\x86\xa7\xdb\xe6\xde\x6e\xa0\xeb\x13\x69\x9e\xe6\xe9\x5e\x9d\xf5\x1f\xfe\xf3\x7a\x34\x14\x24\x17\xfd\xb4\xc0\x23\x00\x00\xff\xff\xbd\x2f\x4d\x3e\x28\x01\x00\x00")

func assetsThanosReceiveControllerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosReceiveControllerServiceYaml,
		"assets/thanos-receive-controller-service.yaml",
	)
}

func assetsThanosReceiveControllerServiceYaml() (*asset, error) {
	bytes, err := assetsThanosReceiveControllerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-receive-controller-service.yaml", size: 296, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc8, 0x34, 0x47, 0x58, 0x13, 0x7d, 0xac, 0x60, 0xc0, 0xf7, 0x87, 0x1f, 0xdd, 0x59, 0x16, 0xcc, 0x45, 0xfd, 0x84, 0xf9, 0x5b, 0x38, 0x7, 0xad, 0x42, 0xea, 0x3e, 0x5b, 0xf2, 0x25, 0x26, 0x76}}
	return a, nil
}

var _assetsThanosReceiveControllerServiceaccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xca\xb1\x0d\xc3\x40\x08\x05\xd0\xfe\xa6\x60\x01\x17\x69\xe9\x32\x43\xa4\xf4\x04\x7f\x29\x28\x3e\xb0\x38\xcc\xfc\x69\xdc\x3f\x39\xed\x8d\x5c\x16\xce\xd4\x8f\xf1\x33\xdf\x99\x5e\xc8\x36\xc5\x53\x35\x2e\xaf\x31\x51\xb2\x4b\x09\x0f\x22\x97\x09\xa6\xfa\x8a\xc7\xda\x12\x0a\x6b\x6c\x1a\x5e\x19\xc7\x81\xbc\xc5\x3a\x45\xc1\x14\x9f\x85\x6c\xa9\x48\xbb\xe6\xf8\x07\x00\x00\xff\xff\x66\x1f\x9e\xd4\x6b\x00\x00\x00")

func assetsThanosReceiveControllerServiceaccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosReceiveControllerServiceaccountYaml,
		"assets/thanos-receive-controller-serviceAccount.yaml",
	)
}

func assetsThanosReceiveControllerServiceaccountYaml() (*asset, error) {
	bytes, err := assetsThanosReceiveControllerServiceaccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-receive-controller-serviceAccount.yaml", size: 107, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6e, 0x54, 0x17, 0x4e, 0x3a, 0xe6, 0x92, 0xb1, 0x85, 0x70, 0xee, 0xfc, 0x30, 0x8a, 0x6f, 0xa7, 0x8d, 0xeb, 0xfd, 0x2a, 0x35, 0xc2, 0x4d, 0xc6, 0xee, 0x6e, 0x59, 0x27, 0x26, 0xc0, 0x9b, 0xd2}}
	return a, nil
}

var _assetsThanosReceiveControllerServicemonitorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x8e\x31\x6e\xec\x40\x0c\x43\xfb\x39\x85\x2e\x60\x2f\x7e\x3b\x67\xf8\xa9\x02\xa4\x97\x65\x22\x16\xd6\x23\x0d\x24\xad\xcf\x1f\x18\x9b\x3e\x25\xc9\x07\x92\x3c\xf5\x0b\x91\xea\xd6\x69\xb8\x69\x79\xa8\x7d\xaf\xe2\x01\xcf\x55\x7c\x3c\xae\x7f\xed\xa9\xb6\x77\xfa\x44\x5c\x2a\xf8\x78\x53\x6d\xa0\x78\xe7\xe2\xde\x88\x8c\x07\x3a\xd5\xc1\xe6\xb9\x04\x04\x7a\x61\x11\xb7\x0a\x3f\x4f\xc4\x2f\x91\x93\x05\x9d\x7c\x4b\xc4\xc5\xf7\xd2\x6b\xb4\x9c\x90\xbb\x02\xb6\x4f\x57\xab\xbc\xc5\x42\xd3\xa3\x3a\x1d\x55\xb3\x11\x25\x4e\x48\x79\xdc\x11\xd1\xe0\x92\xe3\x3f\x6f\x38\xf3\x6d\x10\xf1\x9c\xeb\xf3\xb5\x21\x0c\x85\x5c\xd5\x1f\x7f\x3d\xfa\x09\x00\x00\xff\xff\x5c\x95\x36\xdf\xf8\x00\x00\x00")

func assetsThanosReceiveControllerServicemonitorYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosReceiveControllerServicemonitorYaml,
		"assets/thanos-receive-controller-serviceMonitor.yaml",
	)
}

func assetsThanosReceiveControllerServicemonitorYaml() (*asset, error) {
	bytes, err := assetsThanosReceiveControllerServicemonitorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-receive-controller-serviceMonitor.yaml", size: 248, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb4, 0x53, 0x81, 0xb2, 0xe0, 0x76, 0xcc, 0x15, 0x4b, 0xe3, 0x21, 0xdf, 0x77, 0x54, 0xeb, 0xc9, 0xd5, 0x8b, 0x4f, 0xa4, 0x6f, 0xe0, 0x10, 0xa5, 0x5b, 0xa0, 0x98, 0xb7, 0x5d, 0xfb, 0x79, 0xf}}
	return a, nil
}

var _assetsThanosReceiveServiceDefaultYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x41\x4e\xc3\x30\x10\x45\xf7\x3e\xc5\x5c\x20\xa5\xcd\x2e\xbe\x01\x1b\x54\x09\x89\xfd\xc4\xf9\xb4\x56\x1d\xdb\x9a\x99\x84\xeb\x23\x47\x45\x14\x14\x96\xec\xec\x3f\x7e\xcf\x5f\xc3\x35\xbe\x41\x34\x96\xec\x69\x3d\xb9\x5b\xcc\x93\xa7\x57\xc8\x1a\x03\xdc\x0c\xe3\x89\x8d\xbd\x23\x4a\x3c\x22\x69\x3b\x11\x71\xad\x87\xdb\x32\x42\x32\x0c\x7a\x88\xe5\x29\x66\x35\xce\x01\x9e\x26\xbc\xf3\x92\xec\x8f\x77\x99\x67\x78\xb2\x2b\xe7\xa2\x9d\x20\x20\xae\x70\x44\x7b\x71\xf7\x6d\x6a\x63\xad\xdc\xf4\x65\x54\xc8\xca\x56\x24\x2e\xb3\xd3\x8a\xd0\x2a\x85\xb4\xa8\x41\x9e\xcf\x9e\x5e\x4a\x6e\xc6\x5a\xc4\xb6\xb6\xdd\x5d\x7e\x91\x1a\xb6\x52\x6d\xe2\xe9\x74\x1c\x8e\xa7\xed\x6e\x2c\x17\xd8\xf9\x47\xfa\x05\x5d\xcd\xea\x2f\xa8\xdf\x85\xfa\x07\x48\x30\x17\x43\xf7\x21\xd1\xf0\x08\x0f\xfd\xb0\xf3\xe3\x3d\x55\x24\x04\x2b\xf2\x2f\x0b\xfe\x0c\x00\x00\xff\xff\x24\x8d\x32\x99\xe5\x01\x00\x00")

func assetsThanosReceiveServiceDefaultYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosReceiveServiceDefaultYaml,
		"assets/thanos-receive-service-default.yaml",
	)
}

func assetsThanosReceiveServiceDefaultYaml() (*asset, error) {
	bytes, err := assetsThanosReceiveServiceDefaultYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-receive-service-default.yaml", size: 485, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0x5c, 0xae, 0xcb, 0x6c, 0xea, 0xd8, 0x72, 0xa9, 0x26, 0xd1, 0xac, 0x6d, 0x69, 0x43, 0x30, 0xa6, 0x24, 0x17, 0x7, 0xfb, 0xf1, 0xf4, 0xd2, 0x4d, 0x26, 0xda, 0xbd, 0x2a, 0xca, 0x19, 0xc0}}
	return a, nil
}

var _assetsThanosReceiveServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x90\x41\x6a\xc3\x40\x0c\x45\xf7\x73\x0a\x5d\xc0\x69\xec\x9d\xe7\x14\x85\x42\xf7\xf2\xe4\x93\x0c\xb1\x47\x42\x52\xdc\xeb\x17\x9b\x14\xd2\x12\x0a\xd9\xcd\x3c\xf1\xf4\x40\xac\xf5\x13\xe6\x55\x5a\xa6\xb5\x4f\xd7\xda\x4e\x99\x3e\x60\x6b\x2d\x48\x0b\x82\x4f\x1c\x9c\x13\xd1\xcc\x13\x66\xdf\x5e\x44\xac\x7a\xb8\xde\x26\x58\x43\xc0\x0f\x55\xde\x1a\x2f\xc8\x14\x17\x6e\xe2\x9d\xa1\xa0\xae\x48\x44\xff\x60\x57\x2e\xc8\x24\x93\xc3\x56\x0e\xb1\x7a\x5b\x92\x2b\xca\x96\x50\xb1\xd8\x5b\xdd\x7d\xc5\xd9\xb4\xec\xe9\x6d\x92\xa9\x3f\x8e\xc7\x7e\xff\x07\xdb\x19\xf1\xfe\x8b\xfe\x48\x97\x08\xfd\x23\x0d\x4f\xa5\xe1\x41\x32\x2c\x12\xe8\xbe\xac\x06\x1e\xe5\x71\x18\x9f\x14\xef\xd4\x31\xa3\x84\xd8\x4b\xe7\xf9\x0e\x00\x00\xff\xff\xa1\x4d\xca\x71\x7b\x01\x00\x00")

func assetsThanosReceiveServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosReceiveServiceYaml,
		"assets/thanos-receive-service.yaml",
	)
}

func assetsThanosReceiveServiceYaml() (*asset, error) {
	bytes, err := assetsThanosReceiveServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-receive-service.yaml", size: 379, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa9, 0xa9, 0x78, 0xe9, 0xcc, 0x64, 0x42, 0x61, 0xa7, 0x5a, 0xd, 0x54, 0x16, 0x7d, 0x9e, 0x18, 0x3a, 0xbf, 0xde, 0x4b, 0x8b, 0x5, 0xf4, 0xac, 0xb0, 0x8d, 0xf6, 0xe8, 0xc5, 0x18, 0x68, 0x3}}
	return a, nil
}

var _assetsThanosReceiveStatefulsetDefaultYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x58\xdd\x6e\xdb\xb8\x12\xbe\xf7\x53\x10\x41\x2f\x1a\xe0\x48\xb2\x9c\xa4\x4d\x04\xe8\x22\x27\x75\x73\xda\x9e\xd4\x46\x1c\xec\x5e\x16\x63\x6a\x24\x31\xa5\x48\x95\xa4\xdc\x1a\xd8\x87\x5f\x50\x92\x65\xfd\xd9\x71\x8b\xee\x2a\x17\x09\xc8\xf9\xe3\x37\x33\xdf\x90\x81\x9c\xfd\x81\x4a\x33\x29\x02\x02\x79\xae\xbd\x8d\x3f\xf9\xca\x44\x14\x90\x95\x01\x83\x71\xc1\x57\x68\x26\x19\x1a\x88\xc0\x40\x30\x21\x84\xc3\x1a\xb9\xb6\x7f\x11\xab\xe1\x7e\x2d\xd6\xa8\x04\x1a\xd4\x2e\x93\x1e\x13\xda\x80\xa0\x18\x90\x08\x63\x28\xb8\x39\x20\x27\x20\xc3\x80\x98\x14\x84\xd4\x8e\x42\x8a\x6c\x83\x07\x44\x8d\x02\xca\x44\x12\x90\x67\xc0\x04\x95\x03\x09\x8a\xca\x2c\x95\xc2\x28\xc9\x39\x2a\xb7\x36\xe1\x56\x16\x5d\x26\xfb\xc6\x9d\xbd\xf0\x8b\xba\x5e\x0a\x3a\x55\xa5\xcf\xfd\x29\xc6\x22\x76\xba\xdb\x3a\x07\x7b\x72\xb9\xd6\xa8\x36\x60\xa4\x62\x45\x36\xd1\x39\x52\x8b\x96\xc2\x9c\x33\x0a\x3a\x20\x17\x13\x42\x34\x72\xa4\x46\xaa\x0a\xc7\x0c\x0c\x4d\xff\xdf\x02\xf6\x74\x68\x7f\x02\x5c\x1b\x15\xa3\xf8\xf9\xf8\x41\x0c\x66\x39\x07\x83\x75\x64\xad\xcc\xdb\x8f\x77\x82\xfc\x99\x30\x7f\xaa\x0a\x76\xa0\x95\x6a\x71\xcc\x04\x33\xdb\xbd\xd3\x5c\x46\xb7\xc2\xb0\xdb\xc1\x06\x21\xb9\xc2\x18\x95\xc2\xe8\x5d\x61\x13\xb8\xa2\x29\x46\x05\x67\x22\xf9\x90\x08\xd9\x2c\xcf\x7f\x20\x2d\x8c\x2d\xfa\x96\xaa\x53\xda\xad\x6d\x3e\xa1\xca\xda\x9b\xcd\xd9\x57\x9d\xc4\xb5\xbf\x32\x89\xf3\x1f\xb9\x42\x6d\xfb\x49\x0f\x25\x1c\xf2\x15\xb7\xc1\x01\x1c\x06\xd2\x84\xc8\x1c\x95\x2d\xa3\x80\x7c\x10\x23\xdb\x1b\xe0\x05\x8e\xb8\xb1\x8e\x46\x30\xdd\x7f\x4d\xad\x0e\x94\x9d\x5e\xf1\x76\x77\x8d\xcc\x25\x97\xc9\xf6\x93\x3d\x45\xf7\x04\xa9\xd4\x66\x70\x8a\xef\xc8\x92\xd4\x04\xc4\x9f\x4e\xeb\x75\xdb\x75\xc0\x04\xaa\xc6\xb3\x43\x40\x25\xad\x38\x1c\xd2\x8f\xd9\x21\x8e\x93\xa8\x9c\x3a\x10\x45\x16\xdb\x70\xea\x96\x3f\x81\x3f\xbd\x99\xfa\x1d\xb1\xd4\x98\x7c\x54\x6c\xd6\x11\x53\x98\x49\x83\xce\x77\xc5\x0c\xba\x03\xf1\x9b\xd9\x4d\xd7\xaa\x5c\x3f\x6b\x23\x15\xba\x54\x8a\x98\x25\xe1\xab\xd7\x8b\xff\x7e\x5c\x3d\x2d\x1e\xe7\x5f\xee\x16\x9f\xdf\x7f\xb8\x3f\xef\x88\x1b\x1d\xad\xdd\x1c\x4c\x1a\x7a\x1b\x50\x5e\x95\x09\x6f\xec\x54\x65\x41\x85\x35\x31\x84\x67\xaf\x5e\x7f\xbe\x7d\x98\x9f\x9f\x8d\xca\x94\xda\xe1\x99\x51\x05\x9e\x0d\xdd\x29\x34\x28\x6c\x41\x87\x6f\xd2\xde\x51\x2b\x6e\xdb\x31\x9a\x76\x62\xc6\xb1\x8a\x8c\xb3\xb5\xd7\xad\x93\x86\xf8\xb4\xfb\xac\xa5\x18\xb5\xc4\x25\x05\xee\xa0\x88\x72\xc9\x84\x09\x2d\xe4\x81\xe7\xd5\xb1\xbb\xe3\xb4\xe2\x56\xdb\xab\xe5\xed\xdd\xfc\xdc\xd5\x1b\xea\x52\x5e\x68\x83\xaa\xb2\x56\x61\xee\x41\xce\xbc\x8d\x3f\x82\xd4\x5f\xed\x2e\x75\xea\x79\xb0\xcb\x46\xa7\xe2\xcc\x36\xc7\x80\x7c\xbc\x9d\xdf\xcf\x1f\x3b\x1b\x95\x70\xbf\xdc\x6b\x46\xfc\xf2\x02\xb7\x77\x54\x20\xcb\x39\xaa\x2f\x95\x27\x05\x06\x39\xcb\x98\x61\x22\x39\x20\x98\x83\x82\x2c\x20\xfd\x0a\xac\xc0\xac\x73\x6f\x33\xe7\xc4\x60\x79\x25\xbc\x68\x04\x51\x6c\xda\x7d\x51\x05\x69\x71\x6c\x79\x2a\x39\xe0\xbd\x92\x3d\xb2\x8a\x19\xf2\xe8\x11\xe3\xfe\x81\xcb\xf5\x25\x98\x34\x68\x98\xdd\xed\xb4\xed\xce\x4d\xaf\xc2\x5f\xf6\xa8\x91\x2a\x34\x9f\x70\x3b\xe2\xb5\x64\xbd\x7a\xba\x6e\x21\xe3\x23\x74\xd4\xa0\x2f\xd7\xcf\x48\x8d\xed\x37\x48\x86\x61\x35\x55\xf4\xfb\x21\x28\x09\xb1\x91\x65\x19\x24\x18\x90\x6f\x05\x6c\xcb\x3b\x48\xd5\xc4\xd5\xaf\x60\x33\x75\x6f\xdc\x69\x23\xcb\xd9\x06\x05\x6a\xbd\x54\x72\x8d\x6d\x77\x31\x30\x5e\x28\x7c\x4a\x15\xea\x54\xf2\x28\x20\xd7\xad\x5d\xdb\x39\xf7\x68\xba\xf1\xe5\x65\x60\x9e\xe3\xa5\x08\xdc\xa4\xdb\xee\xa6\x54\x25\x9b\xb6\xf9\xac\xc4\x9e\xa6\x68\xd1\xf9\xdf\xd3\xd3\xb2\x3d\x0b\x51\x31\x19\xad\x90\x4a\x11\xd9\x6b\xc7\x3e\xe2\x83\x73\x77\xe7\xa5\x43\xc8\x0d\x69\x2f\x1b\xff\xfe\xa4\x9f\x3e\xcb\xd0\xc7\x75\x66\x03\x1d\x8b\xc0\x11\x9d\x0e\x11\xef\x74\xda\xdc\xdd\x6c\x2a\x84\x88\x9d\x98\x82\xd9\xf4\xe4\x1c\x58\xb3\xbf\x33\x03\x57\xad\x80\xb5\x2c\x54\x6f\x00\x97\x44\xd2\x1b\xc9\x34\x2f\x02\x72\xe6\x9f\x75\x16\x33\xcc\xa4\xda\x06\xc4\xbf\x67\xad\x75\x85\xdf\x0a\xd4\xa3\x06\xfc\xe9\x34\x1b\xb5\x70\xe5\xcf\x1e\xf6\x36\x36\x92\x17\x19\x3e\xc8\x42\x74\x0b\x20\xb3\x2b\x55\xcb\x1c\x1b\x69\x87\xee\xc8\x60\xa0\x13\x26\x44\x0b\xc1\xb7\x01\x89\x81\x6b\x3c\xe2\x66\x38\x9f\x06\xae\x3a\xb7\x15\xc7\xa0\x00\x61\xf4\xc1\x9b\x85\xe5\x5d\x9b\x41\x54\xae\x2d\x57\xd7\x5e\x5a\x1c\xbb\x10\x46\x42\x07\x9e\xe7\xd5\x2f\x0c\x6a\xdf\x05\x96\x8c\x9d\x14\x21\xe2\xa8\xf5\x60\x80\x05\xfe\xe5\xec\x6a\x3a\x6e\xdb\x8e\x86\xb0\xd7\x0f\x8e\x53\xd9\x76\x0d\x24\x3a\xcc\x65\xb4\xe7\x9c\xb0\x6d\xfb\x3f\xbb\xad\xf0\xd5\xeb\xe5\xe2\xdd\xf9\xcb\xc3\xe0\x5f\xa1\xc3\x9d\xc3\xe5\xe2\xdd\x3f\x38\x7c\x6a\xd2\xad\x90\xaa\xc7\xbc\xd7\x7e\xf5\x05\xbe\xeb\x5f\xfe\x1a\xf3\x5e\x9d\xd8\xf5\x63\xed\x7e\x39\x7b\xeb\xbf\xdc\xee\x15\x42\x83\x47\x2a\x39\x81\x52\xdf\x5c\x5f\x0c\x99\xae\xb6\x64\x52\xc5\x62\x73\x58\xf7\xea\xed\xdb\xeb\x81\x6e\x75\xdd\xd1\x47\xc8\xb5\x77\xa6\x4a\x2d\x43\xa3\x18\xd5\xbf\x48\x53\xfe\xec\x7a\x9c\x65\xfc\xd9\xf5\xc3\x89\x4c\x75\x31\x1b\x37\xf1\xe6\xb2\xb1\x60\x50\x65\x4c\x94\x77\xa6\x7b\x05\x14\x97\x5d\x92\xf5\x1b\x82\xaf\xe8\xac\xf5\xd2\xa8\x50\x79\x80\x3c\x38\x8d\x48\x9c\x04\x85\x7d\x81\x61\x34\x39\x41\x7a\xb2\xf3\x78\xc7\x81\x65\x4f\xf5\x33\xba\x74\xef\x0c\xde\xd1\xc7\x99\xb2\xf3\xfc\xa5\x14\xb5\x7e\x90\x51\xfb\x24\x8f\x08\xd1\x9f\x76\x04\x2e\x44\xd3\xa5\x23\xc9\x1a\x03\xba\xbe\x5a\x05\xe4\x6a\xda\x8c\x8f\x7a\xed\x8e\x83\xd6\xd5\xbf\x07\xec\x1b\x3e\x02\x15\x4d\xfe\x0e\x00\x00\xff\xff\x4b\xe8\x85\x27\x21\x12\x00\x00")

func assetsThanosReceiveStatefulsetDefaultYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosReceiveStatefulsetDefaultYaml,
		"assets/thanos-receive-statefulSet-default.yaml",
	)
}

func assetsThanosReceiveStatefulsetDefaultYaml() (*asset, error) {
	bytes, err := assetsThanosReceiveStatefulsetDefaultYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-receive-statefulSet-default.yaml", size: 4641, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x22, 0x90, 0xb1, 0xc0, 0xd0, 0xe1, 0x5d, 0x34, 0x7e, 0x22, 0x1f, 0x26, 0xce, 0x70, 0x17, 0xce, 0x14, 0xc4, 0x31, 0xc6, 0x1a, 0x9b, 0xe5, 0xda, 0xf5, 0x1b, 0x97, 0x58, 0x42, 0xb1, 0x4a, 0xdd}}
	return a, nil
}

var _assetsThanosRulerServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x6e\xc3\x40\x08\x45\xf7\x73\x0a\x2e\x90\x34\xee\xae\x73\x83\x6e\xaa\x48\x95\xba\xc7\x93\xaf\x64\xe4\xf1\x80\x00\xfb\xfc\x95\x2d\x77\xd3\xaa\x8b\xec\xe0\xf3\xdf\x07\x58\xeb\x17\xcc\xab\xf4\x4c\xeb\x90\xa6\xda\x6f\x99\x3e\x61\x6b\x2d\x48\x33\x82\x6f\x1c\x9c\x13\x51\xe3\x11\xcd\xb7\x8a\x88\x55\xcf\xd3\x32\xc2\x3a\x02\x7e\xae\xf2\xd2\x79\x46\xa6\x78\x70\x17\x3f\xd9\xd2\x60\x89\xe8\x5f\xd1\x95\x0b\x32\xc9\xe8\xb0\x95\x43\xac\x2e\x73\x72\x45\xd9\xe2\x4b\x5b\x3c\x60\xef\xd7\x4c\x1f\xd2\x91\x88\x54\x2c\xf6\xcd\xa7\x23\xf2\x6e\x5a\xf6\x43\xb6\x49\xa6\xe1\xf2\x76\x19\xf6\x3e\xd8\xee\x88\xeb\xae\x1e\xa6\x1f\xe6\x11\xa1\xbf\x98\xd7\x3f\xcc\x61\x72\x34\x94\x10\x7b\xe2\xdb\xef\x00\x00\x00\xff\xff\x74\x7b\x72\x1d\x48\x01\x00\x00")

func assetsThanosRulerServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosRulerServiceYaml,
		"assets/thanos-ruler-service.yaml",
	)
}

func assetsThanosRulerServiceYaml() (*asset, error) {
	bytes, err := assetsThanosRulerServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-ruler-service.yaml", size: 328, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf4, 0x96, 0x19, 0xe, 0x96, 0x33, 0x3, 0xb0, 0xd5, 0x9b, 0x7d, 0x97, 0x7f, 0xd5, 0xf2, 0xab, 0xf, 0xb4, 0x77, 0xfa, 0x10, 0x62, 0x7, 0xaf, 0x61, 0xd3, 0x2d, 0x90, 0x7, 0x2b, 0xb7, 0x1d}}
	return a, nil
}

var _assetsThanosRulerStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xcb\x6e\xdb\x3a\x10\xdd\xeb\x2b\x08\x23\x8b\x04\x17\x92\x25\xe3\xe6\xe2\x86\x80\x17\x6d\xf3\xe8\x2b\xb1\x11\x1b\xdd\x1a\x63\x6a\x6c\x31\xa1\x44\x66\x48\x09\x10\x8a\xfe\x7b\x41\x3f\x14\x31\x71\x52\x03\x95\x17\xb6\xcf\x0c\xcf\x99\x39\x33\x14\x18\xf9\x03\xc9\x4a\x5d\x71\x06\xc6\xd8\x61\x93\x45\x8f\xb2\xca\x39\x9b\x39\x70\xb8\xaa\xd5\x0c\x5d\x54\xa2\x83\x1c\x1c\xf0\x88\x31\x05\x4b\x54\xd6\xff\x62\xfe\x44\xf2\x58\x2f\x91\x2a\x74\x68\x13\xa9\x87\x15\x94\xc8\x99\x2b\xa0\xd2\x36\xa6\x5a\x21\x45\x8c\xbd\x09\x5a\x03\x02\x39\xd3\x4b\x8b\xd4\x80\xd3\x24\xeb\x32\xb2\x06\x85\xa7\x27\x34\x4a\x0a\xb0\x9c\x8d\x22\xc6\x2c\x2a\x14\x4e\xd3\x56\xb8\x04\x27\x8a\xef\xbd\x4a\x8e\xae\xc5\x2b\x49\x81\x77\x87\x62\x0e\x4b\xa3\xc0\xe1\x4e\xa3\xd7\xb4\x7f\x54\x20\x77\xb4\x20\x63\xfb\x86\xfc\x23\x74\xe5\x40\x56\x48\x1d\x51\xcc\x80\xd6\x3d\xda\x98\xf9\x93\xbd\xbf\x71\xbc\x26\x23\x62\xc8\x73\x42\x6b\xc7\x69\xb2\xf9\xf0\x2c\xbd\x48\xb3\x20\xad\x70\xce\x1c\x4c\x1b\x05\x69\x7a\xf9\x60\x9d\x26\x4c\x84\xae\x56\x72\x3d\x3e\x39\x9d\x7c\xfc\x3a\x9b\x4f\xee\xaf\x16\x9f\x26\x77\xd7\x5f\x6e\xce\x82\x74\x6f\x41\x9c\x4b\x1a\x0f\x1b\xa0\xe1\xb6\xb9\xe1\x73\x73\xfb\xb4\x8d\x3b\xe3\x0d\xbe\xd8\x4d\x6e\x3c\x38\x39\xbd\xfb\x70\x7b\x75\x36\x08\x32\x41\x21\xb9\x64\x93\x1f\xe7\xa4\xcd\x78\x10\x9c\x0a\x93\x9f\x6a\xa4\x76\x9c\x57\xd6\x52\xf3\xcf\xc2\x77\x98\x2c\x9c\x30\xc9\xce\x64\x1f\x96\x48\x49\xb0\x41\x89\x6d\x44\x22\x54\x6d\x1d\x52\xa2\xb4\x00\xd5\x51\x62\xd5\xf4\x9d\xde\x0e\xcc\xd7\xd8\x81\x8c\x35\xa0\x6a\xbc\x26\x5d\xf2\x1e\xc8\xd8\x4a\xa2\xca\xef\x71\x15\xa2\x3b\x7c\x0a\xae\xe0\xdd\xc6\x24\x9e\xf7\x95\xcc\x0b\x97\xff\xac\x68\x51\x10\xba\x6f\xd8\x1e\x50\x7d\xc4\x76\xbf\x69\x49\x0b\xa5\x7a\x11\x0e\x36\x51\x2f\x1f\x50\x38\x3f\x73\x58\x3f\x97\x25\x4b\x58\x23\x67\x4f\x35\xb4\x7e\x77\x77\x83\xdd\x7e\xf1\x26\x4d\x2e\x92\xb4\xcb\x55\xb2\xc1\x0a\xad\x9d\x92\x5e\x62\xbf\x94\x15\x48\x55\x13\xce\x0b\x42\x5b\x68\x95\x73\x36\xfa\xb7\x17\xf6\xf3\xba\x41\x17\x16\x6f\x36\x5e\x0d\xe3\x61\x81\xa0\x5c\xd1\x86\x41\x4d\x8e\xb3\x70\x69\x37\x5e\x88\x02\x7d\x4b\x9f\xe7\xf3\x69\x2f\x60\x90\xa4\xce\x67\x28\x74\x95\x5b\xce\xce\xa3\x83\x06\x84\xdb\xea\x25\x82\xfb\xd6\xdd\xc9\x69\x27\x9e\x45\x2f\xbd\xf4\x77\xf0\xfd\x33\xa3\x57\x67\x7c\xfb\x1d\x48\x08\xb9\x3c\xd2\xc4\xec\xff\xa3\x4d\xf4\xb4\x7f\x65\xa1\xac\xa4\x93\xa0\x2e\x51\x41\xdb\x19\x99\xa5\xc7\x98\x4c\x68\x75\x4d\x02\x6d\xbf\x36\x25\x4b\xe9\x6c\x58\xad\x30\x35\x67\x83\x6c\x10\x80\x25\x96\x9a\x5a\xce\xb2\x1b\xd9\xc3\x09\x9f\x6a\xb4\x07\x09\xb2\x34\x2d\x0f\x32\x8c\xce\xff\xbb\x7d\xe6\x68\xb4\xaa\x4b\xbc\xd5\x75\x15\x8e\xb9\xf4\xc8\xf6\xa2\xbe\xfd\x2a\x3b\xb4\x39\x9b\x57\x60\x50\x22\xe4\x93\x4a\xb5\x9c\xad\x40\xd9\xfd\x8d\xda\xca\xf6\x5e\xeb\x58\x1a\xd7\x5e\x4a\xe2\xec\xe7\xaf\x77\xf6\x72\xcb\xfe\x3b\x00\x00\xff\xff\xdf\xfb\x97\x28\x88\x07\x00\x00")

func assetsThanosRulerStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosRulerStatefulsetYaml,
		"assets/thanos-ruler-statefulSet.yaml",
	)
}

func assetsThanosRulerStatefulsetYaml() (*asset, error) {
	bytes, err := assetsThanosRulerStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-ruler-statefulSet.yaml", size: 1928, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x99, 0x99, 0x99, 0x69, 0x36, 0x48, 0x20, 0xa8, 0x98, 0xb2, 0x2a, 0xd, 0xcd, 0x16, 0x3c, 0x28, 0x76, 0xe2, 0x88, 0x5d, 0x24, 0x5c, 0xb3, 0xa6, 0x76, 0xf4, 0x76, 0x7a, 0x84, 0x28, 0xc3, 0xc4}}
	return a, nil
}

var _assetsThanosRulesPrometheusruleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\xc8\x11\xfe\xee\x5f\x31\x67\x5c\x01\xe9\x60\xf9\xec\xe0\x52\x20\x02\x1c\xa0\x97\x5c\xe2\xa0\x6d\x72\x95\x73\x05\x0e\x45\xc1\x5b\x2d\x47\xe4\x26\xcb\x5d\x66\x5f\xe4\xb8\xb6\xef\xb7\x17\xfb\x22\x8a\x92\x25\x59\xa4\xc8\x34\x45\xeb\x0f\x81\xcd\x2c\x77\x66\x9e\xe7\xe1\xcc\xec\x90\xa4\x64\x7f\x47\xa5\x99\x14\x63\x28\xa4\x60\x46\x2a\x26\xb2\x53\x2a\x15\x4a\x7d\x4a\x65\xf1\xfd\xfc\xfc\xe8\x23\x13\xe9\x18\x7e\x56\xb2\x40\x93\xa3\xd5\x13\xcb\xf1\xa8\x40\x43\x52\x62\xc8\xf8\x08\x80\x93\x29\x72\xed\x7e\x03\x28\xab\x65\x63\x20\x65\x39\xd2\x0a\xfd\x75\x25\x39\x8e\x81\x70\x54\x66\xa4\x2c\x47\x7d\x04\x20\x48\x81\x63\x90\x53\x8d\x6a\x4e\x9c\x69\x5b\x8c\x4c\x4e\x84\xd4\x47\xba\x44\xea\x36\xcc\x94\xb4\xa5\xdf\x7a\x14\x97\x87\x05\x23\x2a\x8b\x92\x50\x73\xba\xd8\x0b\xc0\xff\x16\x9c\x18\x05\x43\x63\x78\xef\x17\xbf\x08\x6b\xff\x6a\xb9\x61\x25\xc7\xf8\xa7\xfe\x93\xc2\x89\x15\x82\x89\xcc\xdf\x04\x40\x84\x90\x86\x18\x26\x45\xdc\xc7\xfd\x14\xa8\x35\xc9\x70\x0c\xbf\x4a\x0b\x3a\x97\x96\xa7\x20\x70\x8e\x0a\x94\x15\x50\x48\x85\xde\x25\x90\x02\xa3\x39\x88\x06\x80\x18\x90\x82\xe2\xa9\xbf\x35\x27\x73\xac\x36\x05\xb8\xbd\x85\x6f\xe7\x84\x5b\x84\xfb\xfb\x78\x19\x3f\x97\x6a\x0c\xda\x16\x03\x5b\xde\x7e\x90\xd3\x8b\xe3\xd5\x58\xa5\x3a\xbe\x1f\xc2\x73\x38\x8f\xeb\x67\x52\x8d\xe1\x69\x11\xff\xaa\x93\xe0\x7e\xb4\xf3\x91\x99\x9b\x31\x5c\x13\x55\x05\xb9\x19\x99\x4b\xc2\x0d\xa6\x7b\xa1\xb0\x16\xe2\xed\xed\xb7\xc1\xf0\xe9\x07\x39\xbd\xbf\x87\x9c\x68\x98\x11\xc6\x31\x05\x23\x3d\x42\x44\xa4\x20\xe4\x35\x30\x0d\xb9\x37\x73\xba\x12\x6e\x08\x31\xa9\x42\x4c\xc2\xa2\x6d\xf1\xc3\xc5\x45\x1f\xf1\xb3\x2c\x8f\xbf\x32\x29\x5e\x11\xc6\xad\x8a\xaa\x3a\x10\x0f\x16\xe0\x60\x22\x73\x78\xe0\x67\xa4\xd6\x60\x8d\xfc\xbb\x9a\x24\x72\x5b\x10\xc1\xfe\xe5\x14\xf1\x07\x90\x33\xa0\x95\x47\x7a\x15\xb3\xe5\x4d\x83\xda\xed\xda\x16\x30\xbd\x81\xc1\x07\x39\x1d\xc2\x40\x11\x83\x83\x55\x70\x13\xff\x30\x25\xb5\x6d\x93\x59\x0c\x35\x31\xd2\x10\xbe\x0d\xf4\x7f\x3c\x2d\xfe\x39\x1c\x56\xa6\xbe\x3f\xd0\x68\x13\x5b\xdf\xc1\xf9\xd9\x19\x3c\x87\xa7\xd5\x95\x61\x9d\xfd\xf3\x4e\xe8\xff\xd1\xd2\x8f\xe8\x45\xf0\xae\x44\x45\xba\xd6\x40\xd8\xfe\x31\x29\xd4\x40\xbd\x7b\x20\x05\xb9\xf0\xeb\x40\x25\xc8\xe9\x07\x6d\xa4\xc2\x64\xea\x7d\x4a\xaa\x7d\xfb\x54\xc2\x56\xa3\x5f\xa1\x14\x2e\x89\x7e\x2b\xcd\xc4\x8a\xae\x92\xa1\x90\x06\x6c\xc9\x25\x49\x31\x05\x22\x6e\x4c\xee\x04\x30\x93\x0a\x9e\xfc\x00\xb9\xb4\x6a\x8d\xd1\x81\x61\x05\x0e\x86\x30\x82\x82\x7c\xde\x86\x20\x27\xda\x24\xda\x52\x8a\x5a\xcf\x2c\x4f\x82\x81\xc4\xdd\xba\xb5\x70\xd4\x58\x83\x3f\x9e\x85\x7f\x9e\xc3\x93\x1f\x1a\x80\xb6\x56\x82\x3f\x59\x54\x0c\xd5\x5e\x25\xf8\x6f\x61\xed\x6b\x55\xd2\x2b\x54\x73\x54\x3f\x29\x25\xd5\x84\x18\x6c\x02\x74\xdc\xe5\x91\x2c\x9b\x13\x91\xf2\x95\x24\x5b\x3d\x4f\x35\xbd\xc6\x27\x4b\xe1\x27\x8b\xda\xb4\x7d\xae\x32\x55\xd2\x44\xfb\x88\x92\x60\x37\x8d\xa2\xf6\xff\x43\x65\x8a\x17\xbf\x1f\xff\x22\x3e\x0a\x79\x2d\xee\x26\xa8\xa5\x55\x14\x7f\xfa\x9c\x13\xab\x0d\xa6\x77\x6f\x84\x41\x25\x08\xbf\xfb\x45\x90\x39\x61\x9c\x4c\x39\x1e\x9f\x40\x9d\xc4\x08\x73\xd3\x87\xaf\xee\x99\x36\x44\x99\xca\xb3\x7d\x36\x7f\xe4\x61\x3b\xec\x59\xab\x89\xe1\x05\x67\x28\x4c\x8f\x62\xd0\x28\xd2\x2f\x28\x05\xea\xe3\xd9\x26\x85\x6f\x2e\x8e\xdf\xfd\xb9\x43\x7a\xa3\xb5\xaf\x93\x5e\x57\x4f\x5f\xbe\xbd\x6a\x53\x49\xe3\x0e\x7a\x43\x46\x9d\xe3\x4a\xeb\xec\x78\x5b\xb0\xfd\xf2\xed\x55\x0d\xb3\x10\xfa\x81\xf5\x32\xe2\x97\x84\xec\x4b\x4a\xa6\x93\x74\x77\xdb\xd4\x92\xce\xdd\xf6\xb8\x94\x1f\x6d\xd9\xc4\xdc\xf2\x94\xd0\x6d\x99\x8c\xcc\xbc\x11\xda\x10\x61\xfe\x42\x0c\x0a\x7a\xe3\x98\xee\xe2\xc9\x75\xf5\x92\xc0\xb3\x67\x26\x87\x12\x15\x45\x61\x18\x47\xe0\xc1\x88\x63\xfa\xf6\xb6\x86\xe2\x52\x03\x1a\xa9\x14\xa9\xf6\x55\x95\x05\xcf\x9a\xd0\x9f\x33\x6d\x64\xa6\x48\x91\x7c\xb2\xc4\xdb\x1c\x9c\x9d\x3e\x7b\x76\x52\xe7\xe9\x04\x38\x0e\x61\x90\x1b\x53\x26\x31\x4f\x24\xa9\x8d\xbd\x53\xb4\x1f\xab\xf3\x46\x7e\x4e\x62\x55\x52\x17\xc7\xee\xd2\x8d\x2b\xc8\x8e\xa4\xb3\xca\x0f\x22\xd2\xdd\x12\xe9\xd0\x76\x10\x0b\x3c\x87\xb3\x2d\x22\x39\x7b\x5c\x24\x54\x31\xc3\x28\xe1\x3b\x54\x32\x21\x22\xc3\xff\x6b\xa4\x2d\x4f\x89\x72\xf8\x75\xae\x14\x2a\xad\x68\xe6\x40\xc7\x72\x59\x6b\x23\x15\x52\x64\x73\xdc\xab\x8d\x9c\x84\xb5\x97\xc6\x94\x93\x10\x5f\x4b\x79\xc5\x8d\x7a\x91\xd7\xe5\xfb\xf7\x3f\x37\x6a\x26\xfa\x10\xd7\xef\xc7\xab\xf0\x8e\x4e\xbf\xab\xf3\x1b\xaf\xf6\x28\xae\x7d\x1d\xe8\x3b\x17\x2d\x24\xc3\xb2\xfc\x95\x54\xd7\x44\xa5\x51\x39\x6d\x1a\x93\x6d\xb2\x59\xed\x39\x67\xc1\xce\x9e\x63\x9e\x03\xdb\xce\xd8\x39\x44\x3c\x93\x68\x7b\xc1\xd0\xa2\x67\x50\xa8\x2d\x37\x17\xc7\xe8\x3a\xed\xd8\x81\x6e\x62\xa8\x5d\xdb\xf2\x88\xf1\x7d\x8d\x75\x70\xc2\xdf\x53\x09\x97\x44\xe7\x8a\x89\xec\x15\xe3\x38\xc1\x99\x42\x9d\xf7\x27\x07\x15\x0c\xb8\xdc\xe2\x8d\xc2\x8c\x71\x3c\xa9\x01\xbb\xe9\x78\x12\x7b\x5b\x62\x0c\x16\xa5\x59\x0c\x55\xbb\xd1\xc8\xc2\x11\x9d\x38\x4f\x12\xaf\x89\xa6\x5c\x35\x13\xc6\x9a\xc5\x88\x08\x36\x35\xba\x3d\x49\x1c\xd6\xd5\x46\x1e\x5f\x48\x31\x63\xd9\x04\xb9\x24\x69\x94\x43\x57\x35\x45\x48\x03\x53\x44\x01\xee\x80\x1f\x44\xe1\xac\x54\x9a\xa8\xa1\x49\xbd\x17\x76\xe3\xbc\x8f\xcc\xb3\x75\x68\xc3\xf2\x30\x12\x0a\x9b\xd6\x26\x43\xdb\x91\x5d\x82\x5a\x31\xf7\xcd\x21\xa3\xf5\xb5\xa2\xee\x0f\x30\x7b\x95\xf4\x2b\xb7\xf2\xb5\x2a\x69\xab\x21\x80\xbf\xfb\x7f\x6b\x1e\xe4\xa1\xed\x67\x1a\xb4\x79\xeb\x5e\x87\x05\x9e\xc0\x2b\xdf\x87\xbf\x26\xa6\xed\x69\x61\xb3\x0c\xba\x68\xe6\x3c\x24\xa0\xbd\x83\x90\x11\x83\x7d\x75\x76\xf1\xb1\x8e\x13\xde\x30\x00\x08\x66\x13\x67\x76\xaf\x93\x44\xe4\xcf\xb7\x53\x4f\xf6\x6f\xe9\x1a\x9b\x7e\x78\x84\x58\x51\xce\x61\xcd\xdc\x63\x62\xe9\xe8\x6d\xcd\x66\xc9\xfc\xb7\xbf\xab\x69\x95\x1c\xda\xbc\xa7\x69\x95\x2a\x0e\x2c\xd3\x9e\xb2\x77\xd1\xcb\x8a\xfc\x4e\x53\x46\xe4\x7f\x67\xe6\xa8\x81\xe9\x73\xc8\x96\xcc\x61\x72\x84\x80\x64\x43\x49\x34\x4f\x1a\xdb\xa5\xd2\x34\x6b\x9c\x3f\x6d\x9c\x36\x1a\x18\xff\x42\x79\x63\xc3\xa7\x22\x52\xa0\x30\x23\x32\xd5\x28\xcc\x23\x0d\x49\x7c\x9b\xf7\x46\xbf\x94\xd7\x4d\x5e\x03\x2e\xde\x02\x3a\xed\xa4\x4c\x93\xb2\x44\xa2\x30\x85\x99\x92\x45\xed\xeb\x19\x30\x44\x65\x68\xdc\x12\x2a\xe7\xa8\x6e\xb6\x49\x22\x38\xbb\xe3\x5b\x10\xff\x2d\x44\x1f\x73\xbb\xc6\xa1\x2f\x86\x75\xfd\x86\x5e\xcd\xba\xbb\x0f\x3c\xb6\xee\x2f\x71\x46\x2c\x6f\x4e\xfd\xea\xed\x3d\xc3\xb0\xe8\xe2\xd3\x60\xad\x0f\x38\x7c\x6e\x6c\x8c\x42\xc8\xa8\xfd\x06\x1f\xf3\xc5\xc1\x21\x6f\x9e\x41\x8e\xa8\x14\x46\x49\xce\xf7\x7c\xab\xbd\x3c\x37\xc6\xbb\x1a\x63\x56\x1d\x1a\x97\x7b\xec\x89\x60\x2d\x37\x1f\x28\xa4\x65\xd0\x9b\x80\xed\x66\xe8\xb2\x0c\x6f\xe2\x6a\x01\x65\x1c\x5b\x9d\xf7\x36\xc0\xb5\x32\x69\x89\x7b\x03\xcd\x89\xc8\x50\x9f\xec\xd9\xb3\xed\x39\x66\xd1\xb6\xa8\x17\xea\x4d\x93\x8e\x25\x98\x49\xe5\xcd\xc3\x09\xcb\x2e\x0a\x7c\x2d\xac\x59\xa9\x37\x6f\x52\xc0\xc0\x09\x57\x97\x84\xe2\x30\x7c\x1d\x99\x70\x9c\x99\x36\x5e\x2d\x82\x6e\xe5\xd7\x70\xd1\xeb\x5d\x2c\xa7\xc7\x1d\x1c\x07\x1f\xc8\x25\xcc\x64\x0a\x52\xbe\xf0\x8c\xf6\x22\x9a\x30\x9e\xa3\x0b\x4b\xff\x51\xd1\x54\x5e\x24\x41\xc2\x5f\x95\x76\x1e\x38\xf7\x75\x4b\x68\xc6\xb2\x37\x82\x4a\xa1\x99\x36\x8b\xbe\xef\x71\xc9\xe0\xea\x04\xce\x31\xed\x5a\xf9\xf0\xd2\x90\xa2\x76\x17\xd6\x84\xf5\xdb\xda\x31\xe2\xb7\x1a\xa4\x44\x21\x48\x6b\xdc\x5d\xfa\x46\xd0\xad\x29\x7a\xeb\x64\x2f\x27\x3a\xdf\x31\xc7\x83\x1f\x7f\xad\xf1\xea\x47\x45\x9b\x15\xb0\xca\x7f\x75\x79\x83\x0e\xf6\x11\x40\xe5\xd5\x2e\xbe\xab\x1d\x5b\x8c\x16\xab\xa2\xf2\xef\x00\x00\x00\xff\xff\xa9\x7b\x3e\xa7\xa4\x2e\x00\x00")

func assetsThanosRulesPrometheusruleYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosRulesPrometheusruleYaml,
		"assets/thanos-rules-prometheusrule.yaml",
	)
}

func assetsThanosRulesPrometheusruleYaml() (*asset, error) {
	bytes, err := assetsThanosRulesPrometheusruleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-rules-prometheusrule.yaml", size: 11940, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x83, 0x97, 0x12, 0x5d, 0x57, 0x61, 0xfd, 0xc3, 0xb3, 0x80, 0xa5, 0x6d, 0x7b, 0xb8, 0x7f, 0xbe, 0xbe, 0x23, 0x9c, 0xfe, 0x2d, 0x63, 0x8c, 0xf7, 0x25, 0x4e, 0x17, 0x3f, 0xd6, 0xde, 0x6c, 0x19}}
	return a, nil
}

var _assetsThanosStoreServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x31\x4e\x03\x41\x0c\x45\xfb\x39\x85\x2f\x90\x90\xa5\x63\x6e\x40\x83\x22\x21\xd1\x7b\x27\x5f\xc9\x28\xb3\x63\xcb\xf6\xee\xf9\xd1\xac\xa0\x00\x41\x91\xce\x7e\xd6\xfb\xb6\x59\xeb\x07\xcc\xab\xf4\x4c\xdb\x94\xee\xb5\x5f\x32\xbd\xc3\xb6\x5a\x90\x16\x04\x5f\x38\x38\x27\xa2\xc6\x33\x9a\x8f\x8a\x88\x55\x8f\xf7\x75\x86\x75\x04\xfc\x58\xe5\xa9\xf3\x82\x4c\x71\xe3\x2e\x7e\xf0\x10\x43\x22\xfa\x17\xba\x72\x41\x26\x99\x1d\xb6\x71\x88\xd5\x75\x49\xae\x28\x23\xbe\xb4\xd5\x03\xf6\x7a\xce\xf4\x26\x7d\x28\x2a\x16\xfb\xe6\xc3\x57\xe4\xd5\xb4\xec\x87\x8c\x49\xa6\xe9\xf4\x72\x9a\xf6\x3e\xd8\xae\x88\xf3\x0f\xfa\x2d\xdd\x22\xf4\x97\xf4\xfc\xa7\x34\xa8\xa3\xa1\x84\xd8\x03\xff\x7e\x06\x00\x00\xff\xff\xa1\x03\x50\xdb\x4a\x01\x00\x00")

func assetsThanosStoreServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosStoreServiceYaml,
		"assets/thanos-store-service.yaml",
	)
}

func assetsThanosStoreServiceYaml() (*asset, error) {
	bytes, err := assetsThanosStoreServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-store-service.yaml", size: 330, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0xd4, 0x90, 0xf7, 0x9c, 0xf3, 0x92, 0xae, 0xd1, 0x24, 0x8, 0xfb, 0x57, 0xaf, 0x28, 0xc6, 0xde, 0x7d, 0xea, 0xcc, 0x67, 0x31, 0x80, 0x79, 0x70, 0x84, 0xdb, 0x6b, 0xde, 0xdc, 0x85, 0x3}}
	return a, nil
}

var _assetsThanosStoreStatefulsetYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x5f\x6f\xe2\x38\x10\x7f\xe7\x53\x58\xab\x7d\x68\xa5\x73\x42\x68\xbb\x65\x2d\xf1\xd0\xeb\x76\xb9\xdb\xbb\x16\x54\xd0\xdd\x63\x35\x38\x43\xe2\xd6\x7f\xb2\xb6\x83\x84\x74\x1f\xfe\x64\x02\x69\x02\x81\x45\xab\xa5\x0f\x85\xf9\xfb\x9b\xb1\xe7\x37\x86\x42\xfc\x83\xd6\x09\xa3\x19\x81\xa2\x70\xf1\x2a\xe9\xbd\x09\x9d\x32\x32\xf3\xe0\x71\x59\xca\x19\xfa\x9e\x42\x0f\x29\x78\x60\x3d\x42\x24\x2c\x50\xba\xf0\x8d\x04\x8f\xe8\xad\x5c\xa0\xd5\xe8\xd1\x45\xc2\xc4\x1a\x14\x32\xe2\x73\xd0\xc6\x51\xe7\x8d\xc5\x1e\x21\x47\x85\xae\x00\x8e\x8c\x98\x85\x43\xbb\x02\x6f\xac\x28\x55\xcf\x15\xc8\x43\x78\x8b\x85\x14\x1c\x1c\x23\x49\x8f\x10\x87\x12\xb9\x37\xb6\x4a\xac\xc0\xf3\xfc\xef\x06\x92\xb3\xb1\x84\x4c\x82\xe3\x53\x97\xce\xa3\x2a\x24\x78\xdc\xe6\x68\x14\x1d\x3e\xb2\x95\xee\xec\x84\xc7\x8c\xbd\x05\x2e\x74\xc6\xc8\x2b\x60\x86\x96\x42\x86\xda\x6f\xec\x77\x0d\x08\x1f\x6e\xb4\x07\xa1\xd1\xd6\x89\x29\x01\x9b\x35\x60\x50\xd2\xce\x44\x09\xa5\x01\x36\x4d\x85\x1d\xc5\x2b\xb0\x71\x05\x28\x3e\x34\xcb\x6c\xc1\x29\xa4\xa9\x45\xe7\x46\xfd\x68\xf3\xc7\x92\xfe\xe7\x7e\xd2\x32\xcb\xbd\x2f\x3a\xcd\x06\x2d\x33\xb3\x78\xdd\xa4\x88\xb8\xd1\x4b\x91\x8d\x3e\x5e\x4c\x7e\xff\x36\x9b\x4f\x9e\x1f\x5e\xee\x27\x4f\x5f\xff\x1c\x5f\x36\xcc\xff\xab\xbf\x13\x42\xe9\xb6\x17\x3b\xcf\x86\x8e\x10\xbf\x2e\x90\x91\x6f\x77\x0f\xe3\x87\xe7\x96\xa2\x32\x66\x2d\x59\x7d\xbe\x2f\x27\xce\x62\x6b\x08\xaa\x90\x68\x5f\xaa\xf8\x16\x3c\x4a\xa1\x84\x17\x3a\x3b\x62\x58\x80\x05\xc5\xc8\x7b\xd1\xa8\x57\xcd\x63\xa8\x32\xee\xd5\xdc\x88\xb5\x02\x59\xe2\x57\x6b\x54\x1b\xb2\x43\x6e\xd1\xff\x85\xeb\x67\x5c\xee\x17\xf3\x86\xeb\x5d\x0d\xd1\x1a\x94\xdc\x53\xb7\x6a\x34\x8b\x57\xe4\x3e\x54\x0a\xd9\x7b\xad\x42\x41\x86\x8c\x7c\x2f\x61\xbd\xb9\x74\xd5\x55\xa8\xfe\xb1\x55\x3f\xfa\x1c\xf5\x6b\x5b\x29\x56\xa8\xd1\xb9\xa9\x35\x0b\x6c\x42\x59\x82\x90\xa5\xc5\x79\x6e\xd1\xe5\x46\xa6\x8c\x0c\x1b\xda\x70\x3d\xc6\xe8\xdb\xd8\x0b\xf0\x39\x23\x31\x8d\x73\x04\xe9\xf3\x75\x5b\x69\xac\x67\xa4\x7d\x83\x36\xad\xe0\x39\x86\x8a\xfe\x98\xcf\xa7\x0d\x45\x81\x56\x98\x74\x86\xdc\xe8\xd4\x31\x72\xf5\x8e\xf8\xc4\x21\x87\x1c\xad\x29\xa9\x27\x69\x5a\x67\x4f\x7a\xfb\xbd\x0c\x13\x71\xda\x67\x70\xe0\x13\xea\xaf\x85\x16\x21\x15\x67\x36\x71\xd0\x3f\xbb\x8b\x21\xec\xaf\xec\xe1\x4d\x03\xb0\x33\xa5\xe5\xe8\x9a\x99\x37\x93\xe0\xda\x58\x78\x51\x32\xf2\x61\xf0\xa1\x25\x54\xa8\x8c\x5d\x33\x32\x1c\x8b\x86\xdc\xe2\xf7\x12\x5d\x67\x80\x9b\x7e\x5f\x75\x46\x48\x1a\x11\x56\x46\x96\x0a\x1f\x4d\xa9\xdb\x47\xa8\x82\x64\x5a\xf5\xe4\x28\xb1\x75\xdd\x8a\x0d\x21\xb6\x00\x42\x3a\xd1\x72\xcd\xc8\x12\xa4\xc3\xa3\xcc\x4a\xa9\xc5\xd0\x68\xb4\x51\xb8\x19\x51\x6e\x9c\xa7\x41\x30\x4a\xb5\x63\x71\x1c\x6f\xb9\x9b\x1b\x59\x6d\x27\x9a\x23\xa4\x12\x9d\x8b\x3e\x5e\x3c\xdd\x3d\x3e\xcc\xa6\x77\xf7\x0f\x97\x91\x5b\x71\x96\x5c\x0f\x6e\xfa\xdd\xb1\x03\x05\x8d\xf6\xae\x1e\xa5\x55\xec\xc8\x43\xe6\x46\x85\x49\xa3\x7a\x61\x8e\x9a\xb1\x7f\xdb\xa9\x46\x1f\x2f\xa6\x93\x2f\x97\xa7\xd9\xa9\xf6\xfb\x31\x2f\x2d\x05\xca\xb4\x83\x93\x36\xf2\xea\x10\x76\x1b\xf2\x1d\xda\x41\xc2\xe9\xe4\xcb\xaf\x4f\xb5\xcf\x6e\x55\xa7\xb6\x4b\x24\x6e\xee\x53\x96\x44\xc9\xf5\xcf\x51\xdc\xcd\x99\xc3\xd9\x35\x95\xd7\x83\xdb\xe4\xc7\x53\x59\x75\xe8\x60\xfd\x93\x33\xd8\xeb\xd3\xf0\xea\x90\xbc\xb6\x91\x7c\x6e\xc5\xd2\x1f\xf7\xbd\xb9\xbd\x1d\x1e\xf8\x56\xcb\xd4\x9d\xe0\xbe\xbd\x9a\x2a\x37\x85\xde\x0a\xee\x7e\x92\x4d\x92\xc1\xf0\x08\x19\x0c\x86\x8f\x67\x12\xca\xd5\xa0\x3b\xc4\xa7\xeb\x3a\x82\x47\xab\x84\x06\x2f\x8c\x1e\x5b\xe0\x38\x6d\x73\x61\x52\xf3\x70\xc5\x3b\x8e\x11\x5d\xca\xb0\x6b\xab\xdf\xf7\x12\x84\x9a\x6f\x9f\x86\x1b\x08\xf4\xe0\x6d\x78\x8a\x72\x9a\xcf\x39\xe0\x1c\x9d\x7b\x34\x29\x36\xde\x73\xcf\x08\xe9\xbf\x56\x78\x9c\xe8\x7a\x82\x3a\x1a\xd9\xd5\x84\xed\xba\x0f\xbc\x5a\xf3\xe7\x56\x76\x2f\xc1\xb9\xea\x99\xeb\x3c\xe8\x14\x6c\xda\xfb\x3f\x00\x00\xff\xff\xa7\xf4\x35\xc8\xee\x0b\x00\x00")

func assetsThanosStoreStatefulsetYamlBytes() ([]byte, error) {
	return bindataRead(
		_assetsThanosStoreStatefulsetYaml,
		"assets/thanos-store-statefulSet.yaml",
	)
}

func assetsThanosStoreStatefulsetYaml() (*asset, error) {
	bytes, err := assetsThanosStoreStatefulsetYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/thanos-store-statefulSet.yaml", size: 3054, mode: os.FileMode(0644), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x42, 0x38, 0x63, 0x50, 0x44, 0x4f, 0xa8, 0x2d, 0x29, 0xe2, 0x64, 0x83, 0x5a, 0x75, 0x31, 0x6b, 0x44, 0x6c, 0xb1, 0xe8, 0xd8, 0x54, 0xda, 0x6c, 0xd1, 0x3b, 0xcc, 0xcf, 0x90, 0xe8, 0x98, 0x9b}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/jaeger-adminService.yaml":                      assetsJaegerAdminserviceYaml,
	"assets/jaeger-agentService.yaml":                      assetsJaegerAgentserviceYaml,
	"assets/jaeger-deployment.yaml":                        assetsJaegerDeploymentYaml,
	"assets/jaeger-headlessService.yaml":                   assetsJaegerHeadlessserviceYaml,
	"assets/jaeger-prometheusRule.yaml":                    assetsJaegerPrometheusruleYaml,
	"assets/jaeger-queryService.yaml":                      assetsJaegerQueryserviceYaml,
	"assets/jaeger-volumeClaim.yaml":                       assetsJaegerVolumeclaimYaml,
	"assets/observatorium-api-deployment.yaml":             assetsObservatoriumApiDeploymentYaml,
	"assets/observatorium-api-service.yaml":                assetsObservatoriumApiServiceYaml,
	"assets/telemeter-memcached-service.yaml":              assetsTelemeterMemcachedServiceYaml,
	"assets/telemeter-memcached-serviceMonitor.yaml":       assetsTelemeterMemcachedServicemonitorYaml,
	"assets/telemeter-memcached-statefulSet.yaml":          assetsTelemeterMemcachedStatefulsetYaml,
	"assets/telemeter-secret.yaml":                         assetsTelemeterSecretYaml,
	"assets/telemeter-service.yaml":                        assetsTelemeterServiceYaml,
	"assets/telemeter-serviceAccount.yaml":                 assetsTelemeterServiceaccountYaml,
	"assets/telemeter-serviceMonitor.yaml":                 assetsTelemeterServicemonitorYaml,
	"assets/telemeter-serviceMonitorFederate.yaml":         assetsTelemeterServicemonitorfederateYaml,
	"assets/telemeter-statefulSet.yaml":                    assetsTelemeterStatefulsetYaml,
	"assets/thanos-compactor-service.yaml":                 assetsThanosCompactorServiceYaml,
	"assets/thanos-compactor-statefulSet.yaml":             assetsThanosCompactorStatefulsetYaml,
	"assets/thanos-querier-cache-configmap.yaml":           assetsThanosQuerierCacheConfigmapYaml,
	"assets/thanos-querier-cache-deployment.yaml":          assetsThanosQuerierCacheDeploymentYaml,
	"assets/thanos-querier-cache-service.yaml":             assetsThanosQuerierCacheServiceYaml,
	"assets/thanos-querier-deployment.yaml":                assetsThanosQuerierDeploymentYaml,
	"assets/thanos-querier-service.yaml":                   assetsThanosQuerierServiceYaml,
	"assets/thanos-receive-controller-configmap.yaml":      assetsThanosReceiveControllerConfigmapYaml,
	"assets/thanos-receive-controller-deployment.yaml":     assetsThanosReceiveControllerDeploymentYaml,
	"assets/thanos-receive-controller-role.yaml":           assetsThanosReceiveControllerRoleYaml,
	"assets/thanos-receive-controller-roleBinding.yaml":    assetsThanosReceiveControllerRolebindingYaml,
	"assets/thanos-receive-controller-service.yaml":        assetsThanosReceiveControllerServiceYaml,
	"assets/thanos-receive-controller-serviceAccount.yaml": assetsThanosReceiveControllerServiceaccountYaml,
	"assets/thanos-receive-controller-serviceMonitor.yaml": assetsThanosReceiveControllerServicemonitorYaml,
	"assets/thanos-receive-service-default.yaml":           assetsThanosReceiveServiceDefaultYaml,
	"assets/thanos-receive-service.yaml":                   assetsThanosReceiveServiceYaml,
	"assets/thanos-receive-statefulSet-default.yaml":       assetsThanosReceiveStatefulsetDefaultYaml,
	"assets/thanos-ruler-service.yaml":                     assetsThanosRulerServiceYaml,
	"assets/thanos-ruler-statefulSet.yaml":                 assetsThanosRulerStatefulsetYaml,
	"assets/thanos-rules-prometheusrule.yaml":              assetsThanosRulesPrometheusruleYaml,
	"assets/thanos-store-service.yaml":                     assetsThanosStoreServiceYaml,
	"assets/thanos-store-statefulSet.yaml":                 assetsThanosStoreStatefulsetYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"jaeger-adminService.yaml":                      &bintree{assetsJaegerAdminserviceYaml, map[string]*bintree{}},
		"jaeger-agentService.yaml":                      &bintree{assetsJaegerAgentserviceYaml, map[string]*bintree{}},
		"jaeger-deployment.yaml":                        &bintree{assetsJaegerDeploymentYaml, map[string]*bintree{}},
		"jaeger-headlessService.yaml":                   &bintree{assetsJaegerHeadlessserviceYaml, map[string]*bintree{}},
		"jaeger-prometheusRule.yaml":                    &bintree{assetsJaegerPrometheusruleYaml, map[string]*bintree{}},
		"jaeger-queryService.yaml":                      &bintree{assetsJaegerQueryserviceYaml, map[string]*bintree{}},
		"jaeger-volumeClaim.yaml":                       &bintree{assetsJaegerVolumeclaimYaml, map[string]*bintree{}},
		"observatorium-api-deployment.yaml":             &bintree{assetsObservatoriumApiDeploymentYaml, map[string]*bintree{}},
		"observatorium-api-service.yaml":                &bintree{assetsObservatoriumApiServiceYaml, map[string]*bintree{}},
		"telemeter-memcached-service.yaml":              &bintree{assetsTelemeterMemcachedServiceYaml, map[string]*bintree{}},
		"telemeter-memcached-serviceMonitor.yaml":       &bintree{assetsTelemeterMemcachedServicemonitorYaml, map[string]*bintree{}},
		"telemeter-memcached-statefulSet.yaml":          &bintree{assetsTelemeterMemcachedStatefulsetYaml, map[string]*bintree{}},
		"telemeter-secret.yaml":                         &bintree{assetsTelemeterSecretYaml, map[string]*bintree{}},
		"telemeter-service.yaml":                        &bintree{assetsTelemeterServiceYaml, map[string]*bintree{}},
		"telemeter-serviceAccount.yaml":                 &bintree{assetsTelemeterServiceaccountYaml, map[string]*bintree{}},
		"telemeter-serviceMonitor.yaml":                 &bintree{assetsTelemeterServicemonitorYaml, map[string]*bintree{}},
		"telemeter-serviceMonitorFederate.yaml":         &bintree{assetsTelemeterServicemonitorfederateYaml, map[string]*bintree{}},
		"telemeter-statefulSet.yaml":                    &bintree{assetsTelemeterStatefulsetYaml, map[string]*bintree{}},
		"thanos-compactor-service.yaml":                 &bintree{assetsThanosCompactorServiceYaml, map[string]*bintree{}},
		"thanos-compactor-statefulSet.yaml":             &bintree{assetsThanosCompactorStatefulsetYaml, map[string]*bintree{}},
		"thanos-querier-cache-configmap.yaml":           &bintree{assetsThanosQuerierCacheConfigmapYaml, map[string]*bintree{}},
		"thanos-querier-cache-deployment.yaml":          &bintree{assetsThanosQuerierCacheDeploymentYaml, map[string]*bintree{}},
		"thanos-querier-cache-service.yaml":             &bintree{assetsThanosQuerierCacheServiceYaml, map[string]*bintree{}},
		"thanos-querier-deployment.yaml":                &bintree{assetsThanosQuerierDeploymentYaml, map[string]*bintree{}},
		"thanos-querier-service.yaml":                   &bintree{assetsThanosQuerierServiceYaml, map[string]*bintree{}},
		"thanos-receive-controller-configmap.yaml":      &bintree{assetsThanosReceiveControllerConfigmapYaml, map[string]*bintree{}},
		"thanos-receive-controller-deployment.yaml":     &bintree{assetsThanosReceiveControllerDeploymentYaml, map[string]*bintree{}},
		"thanos-receive-controller-role.yaml":           &bintree{assetsThanosReceiveControllerRoleYaml, map[string]*bintree{}},
		"thanos-receive-controller-roleBinding.yaml":    &bintree{assetsThanosReceiveControllerRolebindingYaml, map[string]*bintree{}},
		"thanos-receive-controller-service.yaml":        &bintree{assetsThanosReceiveControllerServiceYaml, map[string]*bintree{}},
		"thanos-receive-controller-serviceAccount.yaml": &bintree{assetsThanosReceiveControllerServiceaccountYaml, map[string]*bintree{}},
		"thanos-receive-controller-serviceMonitor.yaml": &bintree{assetsThanosReceiveControllerServicemonitorYaml, map[string]*bintree{}},
		"thanos-receive-service-default.yaml":           &bintree{assetsThanosReceiveServiceDefaultYaml, map[string]*bintree{}},
		"thanos-receive-service.yaml":                   &bintree{assetsThanosReceiveServiceYaml, map[string]*bintree{}},
		"thanos-receive-statefulSet-default.yaml":       &bintree{assetsThanosReceiveStatefulsetDefaultYaml, map[string]*bintree{}},
		"thanos-ruler-service.yaml":                     &bintree{assetsThanosRulerServiceYaml, map[string]*bintree{}},
		"thanos-ruler-statefulSet.yaml":                 &bintree{assetsThanosRulerStatefulsetYaml, map[string]*bintree{}},
		"thanos-rules-prometheusrule.yaml":              &bintree{assetsThanosRulesPrometheusruleYaml, map[string]*bintree{}},
		"thanos-store-service.yaml":                     &bintree{assetsThanosStoreServiceYaml, map[string]*bintree{}},
		"thanos-store-statefulSet.yaml":                 &bintree{assetsThanosStoreStatefulsetYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
